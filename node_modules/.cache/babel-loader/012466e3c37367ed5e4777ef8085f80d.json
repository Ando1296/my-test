{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/Router/router.js\",\n    _s = $RefreshSig$();\n\n//first example of Routing\n// import React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n// // This site has 3 pages, all of which are rendered\n// // dynamically in the browser (not server rendered).\n// //\n// // Although the page does not ever refresh, notice how\n// // React Router keeps the URL up to date as you navigate\n// // through the site. This preserves the browser history,\n// // making sure things like the back button and bookmarks\n// // work properly.\n// export default function BasicExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <ul>\n//           <li>\n//             <Link to=\"/\">Home</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/about\">About</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/dashboard\">Dashboard</Link>\n//           </li>\n//         </ul>\n//         <hr />\n//         {/*\n//           A <Switch> looks through all its children <Route>\n//           elements and renders the first one whose path\n//           matches the current URL. Use a <Switch> any time\n//           you have multiple routes, but you want only one\n//           of them to render at a time\n//         */}\n//         <Switch>\n//           <Route exact path=\"/\">\n//             <Home />\n//           </Route>\n//           <Route path=\"/about\">\n//             <About />\n//           </Route>\n//           <Route path=\"/dashboard\">\n//             <Dashboard />\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n// // You can think of these components as \"pages\"\n// // in your app.\n// function Home() {\n//   return (\n//     <div>\n//       <h2>Home</h2>\n//     </div>\n//   );\n// }\n// function About() {\n//   return (\n//     <div>\n//       <h2>About</h2>\n//     </div>\n//   );\n// }\n// function Dashboard() {\n//   return (\n//     <div>\n//       <h2>Dashboard</h2>\n//     </div>\n//   );\n// }\n// end first exampl\n// second example\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from \"react-router-dom\"; // Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nexport default function ParamsExample() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Accounts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/modus-create\",\n            children: \"Modus Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/zillow-group\",\n            children: \"Zillow Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/yahoo/arev\",\n            children: \"Yahoo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/netflix\",\n            children: \"Netflix\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:id\",\n          children: /*#__PURE__*/_jsxDEV(Child, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_c = ParamsExample;\n\nfunction Child() {\n  _s();\n\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let {\n    id,\n    barev\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"ID: \", id, \" \", barev]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n} //end of second exmaple\n\n\n_s(Child, \"/S0fvW19V76xzhuVN5bh0bMTa3c=\", false, function () {\n  return [useParams];\n});\n\n_c2 = Child;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ParamsExample\");\n$RefreshReg$(_c2, \"Child\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/Router/router.js"],"names":["React","BrowserRouter","Router","Switch","Route","Link","useParams","ParamsExample","Child","id","barev"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,SALF,QAMO,kBANP,C,CAQA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,sBACE,QAAC,MAAD;AAAA,2BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA,gCACE;AAAA,iCACA,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAUE;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAkBE,QAAC,MAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;KA3BuBA,a;;AA6BxB,SAASC,KAAT,GAAiB;AAAA;;AACf;AACA;AACA,MAAI;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAgBJ,SAAS,EAA7B;AAEA,sBACE;AAAA,2BACE;AAAA,yBAASG,EAAT,OAAcC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAGD;;;GAbSF,K;UAGaF,S;;;MAHbE,K","sourcesContent":["//first example of Routing\n// import React from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n// // This site has 3 pages, all of which are rendered\n// // dynamically in the browser (not server rendered).\n// //\n// // Although the page does not ever refresh, notice how\n// // React Router keeps the URL up to date as you navigate\n// // through the site. This preserves the browser history,\n// // making sure things like the back button and bookmarks\n// // work properly.\n\n// export default function BasicExample() {\n//   return (\n//     <Router>\n//       <div>\n//         <ul>\n//           <li>\n//             <Link to=\"/\">Home</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/about\">About</Link>\n//           </li>\n//           <li>\n//             <Link to=\"/dashboard\">Dashboard</Link>\n//           </li>\n//         </ul>\n\n//         <hr />\n\n//         {/*\n//           A <Switch> looks through all its children <Route>\n//           elements and renders the first one whose path\n//           matches the current URL. Use a <Switch> any time\n//           you have multiple routes, but you want only one\n//           of them to render at a time\n//         */}\n//         <Switch>\n//           <Route exact path=\"/\">\n//             <Home />\n//           </Route>\n//           <Route path=\"/about\">\n//             <About />\n//           </Route>\n//           <Route path=\"/dashboard\">\n//             <Dashboard />\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// // You can think of these components as \"pages\"\n// // in your app.\n\n// function Home() {\n//   return (\n//     <div>\n//       <h2>Home</h2>\n//     </div>\n//   );\n// }\n\n// function About() {\n//   return (\n//     <div>\n//       <h2>About</h2>\n//     </div>\n//   );\n// }\n\n// function Dashboard() {\n//   return (\n//     <div>\n//       <h2>Dashboard</h2>\n//     </div>\n//   );\n// }\n// end first exampl\n\n\n// second example\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n// Params are placeholders in the URL that begin\n// with a colon, like the `:id` param defined in\n// the route in this example. A similar convention\n// is used for matching dynamic segments in other\n// popular web frameworks like Rails and Express.\n\nexport default function ParamsExample() {\n  return (\n    <Router>\n      <div>\n        <h2>Accounts</h2>\n\n        <ul>\n          <li>\n          <Link to=\"/modus-create\">Modus Create</Link>\n          </li>\n          <li>\n            <Link to=\"/zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/yahoo/arev\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/netflix\">Netflix</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/:id\" children={<Child />} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id, barev } = useParams();\n\n  return (\n    <div>\n      <h3>ID: {id} {barev}</h3>\n    </div>\n  );\n}\n\n\n//end of second exmaple"]},"metadata":{},"sourceType":"module"}