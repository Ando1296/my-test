{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/App.js\";\nimport './App.css';\nimport React from 'react'; //// example embedding expressions in JSX\n// function App() {\n//   function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n//   }\n//   const user = {\n//     firstName: 'Harper',\n//     lastName: 'Perez'\n//   };\n//   const element = (\n//     <h1>\n//       Hello, {formatName(user)}!\n//     </h1>\n//   );\n//   return (\n//     <div>{element}</div>\n//   );\n// }\n////jsx is an expression too\n// function App() {\n//   let obj = {ando: '16'}\n//   let element = obj.ando ? <h1>{obj.ando}</h1> : <h1>Ando</h1>\n//   return element\n// }\n//jsx may contain children\n// function App() {\n//   let avatars = {urdl:'https://s1.1zoom.me/big7/216/_445833.jpg'};\n//   let img = <img src={avatars.urdl}/>\n//   // or img = <img src='https://s1.1zoom.me/big7/216/_445833.jpg'/>\n//   let element = (\n//     <div>\n//       <h1>barev!</h1>\n//       <h2>Arev!</h2>\n//       {img}\n//     </div>\n//   )\n//   return element\n// }\n// const App = () => {\n//   let element = <h1>barev</h1>;\n//   //same \n//   let element1 = React.createElement(\n//     'h1',\n//     {className: 'greeting'},\n//     'hellow world'\n//   )\n// }\n//Rendering components\n// function Welcome({name}) {\n//   return <h1>{name}</h1>\n// }\n// function App() {\n//   return(\n//   <div>\n//     <Welcome name=\"Andranik\"/> \n//     <Welcome name=\"Hayk\"/>\n//     <Welcome name=\"Sara\"/>\n//   </div>\n//   ) \n// }\n//clock component update itself every second \n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.props.date.toLocaleTimeString()}</h2>\n//       </div>\n//       //from now after creating some component I will not delete and reset again function App\n//     )\n//   }\n// }\n//step two replace this.props.date with this.state.date\n// class Clock extends React.Component {\n//   render() {\n//         return (\n//           <div>\n//             <h1>Hello Ando</h1>\n//             <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//           </div>\n//         )\n//       }\n// }\n//step3 Add a class constructor that assigns the initial this.state\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props); //(*)\n//     this.state = {date: new Date()}\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   } \n// }\n//step 4 add a timer code to component itself\n//adding lifecycle methods componentDidMount and ComponentWillUnmount\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n// }\n//step5 implementing method tick and setting state (changing initial state by interval)\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}\n//   }\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000)\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n//   tick() {\n//     this.setState({date: new Date()});\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n//clock component without method tick\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   tick() {\n//     this.setState({date: new Date()})\n//   }\n//   componentDidMount() {\n//     setInterval(this.tick.bind(this),1000); //do not forget about losing this\n//   }\n//   render() {\n//     return (\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n//a component may choose to pass its state down as props to its child components\n//component would receive the data in its props and wouldn't know where it comes, it can comes from parent props or state doesn't metter;\n// function FormattedDate(props) {\n//   return <h2>{props.date.toLocaleTimeString()}</h2>\n// }\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.setState({date: props.date});\n//   }\n//   render() {\n//     return (\n//       <FormattedDate date={this.props.date}/>\n//     )\n//   }\n// }\n//creating App1 component which receives 3 Clocks component\n// class Clock extends React.Component {\n//   // notice that if we not give props it will not throws undefined it throws ''\n//   constructor(props) {\n//     super(props);\n//     // this.state = {date: 15}\n//     this.state = {date: props.date}\n//   }\n//   // componentDidMount() {\n//   //   setInterval(() => this.setState({date: ++this.state.date}),1000);\n//   //   //Attention please here this.state.date++ is not setting new state;\n//   //   //this.setState({date: new Date()}) // in this case without toLocaleTimeString method will be an Error\n//   // }\n//   render() {\n//     return (<h1>{this.state.date}</h1>);\n//   }\n// } \n//Handling events\n// function forButton() {\n//   console.log('there was a click');\n// }// when we are working with buttons we should use camelCase rather than lowercase and use curly braces insted string\n// let button = (\n//   <button onClick={forButton}>click me</button>\n// )\n//2cannot prevent default by returning false \n//in ActionLink component we declare a fanction that preventing the default action of button which was returned by ActionLink component\n// function ActionLink() {\n//   function handleClick(e) {\n//     e.preventDefault();\n//     console.log('default action of a tag was prevented');\n//   }\n//   return (\n//     <a href='#' onClick={handleClick}>click me</a>\n//   )\n// }\n//example to determine what is this in Component\n// class Clock extends React.Component {\n//   static counter=0;\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: props.done, date: new Date()}\n//   }\n//   componentDidMount() {\n//     if(Clock.counter > 0) {\n//       setInterval(() => {\n//         this.setState({date: new Date()})\n//       }, 1000)\n//     } else {\n//       console.log('blabla');\n//       Clock.counter++\n//     }\n//   }\n//   render() {\n//     return(\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n// class ButtonforFb extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: true};\n//     this.handleClick = this.handleClick.bind(this)  \n//   }\n//   handleClick() {\n//     document.location.href = 'https://www.facebook.com/';\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick} >click me</button>\n//     )\n//   }\n// }\n//class component event listener Togle\n// class Toggle extends React.Component  {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState((state) => {\n//       return {isToggleOn: !state.isToggleOn}\n//     });\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//       {this.state.isToggleOn ? 'On' : 'Off'}\n//     </button>\n//     )\n//   }\n// }\n// class Toggle extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     // This binding is necessary to make `this` work in the callback\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState(state => ({\n//       isToggleOn: !state.isToggleOn\n//     }));\n//   }\n//get around binding this example be careful\n// class LoggingButton extends React.Component {\n//   // This syntax ensures `this` is bound within handleClick.\n//   // Warning: this is *experimental* syntax.\n//   handleClick = () => {\n//     console.log('this is:', this); //LogingButton copy (wrapped)\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//         Click me\n//       </button>\n//     );\n//   }\n// }\n//2 \n// class LoggingButton extends React.Component {\n//   handleClick() {\n//     console.log(this); //wrapper created by LoggingButton\n//   }\n//   // notice that we call this.handleClick in arrow function\n//   render() {\n//     return(\n//       <button onClick={() => this.handleClick()}> \n//         click me\n//       </button>\n//     )\n//   }\n// }\n//3\n// class LoggingButton extends React.Component {\n//   handleClick(e) {\n//     console.log(e);\n//   }\n//   render() {\n//     //1\n//     return (\n//       <button onClick={(e) => this.handleClick(e)}>click me</button>\n//     )\n//   }\n// }\n//         //passing arguments to event handlers --> handleClick.bind(this, arg1,arg2)\n//Conditional Rendering\n//ex greeting start of example \n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n// function GuestGreeting(props) {\n//   return <h1>Please Sign in or up</h1>\n// }\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if(isLoggedIn) {\n//     return <UserGreeting/>\n//   }\n//   return <GuestGreeting/>\n// }\n// //Logout an loggin buttons\n// function LogginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Login</button>\n//   )\n// }\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Logout</button>\n//   )\n// }\n// // class Loggin control that use Greetings and LogButtons\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false}\n//   }\n//   //callbacks\n//   handleLoginClick(){\n//     this.setState({isLoggedIn: true})\n//   }\n//   handleLogoutClick(){\n//     this.setState({isLoggedIn: false})\n//   }\n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//     if(isLoggedIn) {\n//       button = <LogoutButton onClick={this.handleLogoutClick}/>\n//     } else {\n//       button = <LogginButton onClick={this.handleLoginClick}/>\n//     }\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn}/>\n//         {button}\n//       </div>\n//     )\n//   }\n// }\n//finish of example above\n//inline if with logical && operator\n//ex with inline && operator\n// function Mailbox(props) {\n//   const unreadMessages = props.unreadMessages;\n//   return (\n//     <div>\n//       <h1>Hello</h1>\n//       {unreadMessages.length > 0 && \n//       <h1>\n//         You have {unreadMessages.length} unread messages\n//       </h1>\n//       }\n//     </div>\n//   )\n// }\n// const messages = ['React', 'Re: React', 'Re:Re:React']; //<Mailbox unreadMessages={messages}/> render it\n//#preventing components from Rendering\n//start\n// function WarningBanner(props) {\n//   if(!props.warn) {\n//     return null;\n//   }\n//   return (\n//     <div className=\"warning\">\n//       Waringing!\n//     </div>\n//   )\n// }\n// class Page extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {showWarning: true};\n//     this.handleToggleClick = this.handleToggleClick.bind(this)\n//   }\n//   handleToggleClick() {\n//     this.setState(state => {\n//       return {showWarning: !state.showWarning}\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//       <WarningBanner warn={this.state.showWarning} />\n//       <button onClick={this.handleToggleClick}>\n//         {this.state.showWarning ? 'hide' : 'show'}\n//       </button>\n//       </div>\n//     )\n//   }\n// }\n//end, render Page\n//lists and keys \n//example bullets of li items in ul\n// const numbers = [1,2,3,4,5];\n// const lists = numbers.map(number => <li>{number}</li>);\n// const result = <ul>{lists}</ul>\n//end render {result} in div of app\n//list inside a component\n\nfunction NumberLists(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 481,\n    columnNumber: 43\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: listItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 11\n  }, this);\n}\n\n_c = NumberLists;\nconst numbers = [1, 2, 3, 4, 5]; //end render <NumberLists numbers={numbers}/>\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(NumberLists, {\n      numbers: numbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NumberLists\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/App.js"],"names":["React","NumberLists","props","numbers","listItems","map","number","App"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlsBC,KAAtB,EAA6B;AAC3B,QAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB;AACA,QAAMC,SAAS,GAAGD,OAAO,CAACE,GAAR,CAAYC,MAAM,iBAAI;AAAA,cAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,UAAtB,CAAlB;AACA,sBAAQ;AAAA,cAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;;KAJQH,W;AAKT,MAAME,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAhB,C,CACA;;AACA,SAASI,GAAT,GAAe;AACb,sBACE;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEJ;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;MANQI,G;AAOT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React from 'react'\n\n//// example embedding expressions in JSX\n// function App() {\n//   function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n//   }\n  \n//   const user = {\n//     firstName: 'Harper',\n//     lastName: 'Perez'\n//   };\n  \n//   const element = (\n//     <h1>\n//       Hello, {formatName(user)}!\n//     </h1>\n//   );\n//   return (\n//     <div>{element}</div>\n//   );\n// }\n\n////jsx is an expression too\n// function App() {\n//   let obj = {ando: '16'}\n//   let element = obj.ando ? <h1>{obj.ando}</h1> : <h1>Ando</h1>\n//   return element\n// }\n\n//jsx may contain children\n// function App() {\n//   let avatars = {urdl:'https://s1.1zoom.me/big7/216/_445833.jpg'};\n//   let img = <img src={avatars.urdl}/>\n//   // or img = <img src='https://s1.1zoom.me/big7/216/_445833.jpg'/>\n//   let element = (\n//     <div>\n//       <h1>barev!</h1>\n//       <h2>Arev!</h2>\n//       {img}\n//     </div>\n//   )\n//   return element\n// }\n\n// const App = () => {\n//   let element = <h1>barev</h1>;\n//   //same \n//   let element1 = React.createElement(\n//     'h1',\n//     {className: 'greeting'},\n//     'hellow world'\n//   )\n// }\n\n//Rendering components\n// function Welcome({name}) {\n//   return <h1>{name}</h1>\n// }\n// function App() {\n//   return(\n//   <div>\n//     <Welcome name=\"Andranik\"/> \n//     <Welcome name=\"Hayk\"/>\n//     <Welcome name=\"Sara\"/>\n//   </div>\n//   ) \n// }\n\n//clock component update itself every second \n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.props.date.toLocaleTimeString()}</h2>\n//       </div>\n//       //from now after creating some component I will not delete and reset again function App\n//     )\n//   }\n// }\n//step two replace this.props.date with this.state.date\n// class Clock extends React.Component {\n//   render() {\n//         return (\n//           <div>\n//             <h1>Hello Ando</h1>\n//             <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//           </div>\n//         )\n//       }\n// }\n//step3 Add a class constructor that assigns the initial this.state\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props); //(*)\n//     this.state = {date: new Date()}\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   } \n// }\n//step 4 add a timer code to component itself\n//adding lifecycle methods componentDidMount and ComponentWillUnmount\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n// }\n//step5 implementing method tick and setting state (changing initial state by interval)\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}\n//   }\n\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000)\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n//   tick() {\n//     this.setState({date: new Date()});\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n\n//clock component without method tick\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   tick() {\n//     this.setState({date: new Date()})\n//   }\n//   componentDidMount() {\n//     setInterval(this.tick.bind(this),1000); //do not forget about losing this\n//   }\n//   render() {\n//     return (\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n\n//a component may choose to pass its state down as props to its child components\n//component would receive the data in its props and wouldn't know where it comes, it can comes from parent props or state doesn't metter;\n\n// function FormattedDate(props) {\n//   return <h2>{props.date.toLocaleTimeString()}</h2>\n// }\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.setState({date: props.date});\n//   }\n//   render() {\n//     return (\n//       <FormattedDate date={this.props.date}/>\n//     )\n//   }\n// }\n\n//creating App1 component which receives 3 Clocks component\n// class Clock extends React.Component {\n//   // notice that if we not give props it will not throws undefined it throws ''\n//   constructor(props) {\n//     super(props);\n//     // this.state = {date: 15}\n//     this.state = {date: props.date}\n//   }\n//   // componentDidMount() {\n//   //   setInterval(() => this.setState({date: ++this.state.date}),1000);\n//   //   //Attention please here this.state.date++ is not setting new state;\n//   //   //this.setState({date: new Date()}) // in this case without toLocaleTimeString method will be an Error\n//   // }\n//   render() {\n//     return (<h1>{this.state.date}</h1>);\n//   }\n// } \n\n\n      //Handling events\n// function forButton() {\n//   console.log('there was a click');\n// }// when we are working with buttons we should use camelCase rather than lowercase and use curly braces insted string\n// let button = (\n//   <button onClick={forButton}>click me</button>\n// )\n\n//2cannot prevent default by returning false \n//in ActionLink component we declare a fanction that preventing the default action of button which was returned by ActionLink component\n// function ActionLink() {\n//   function handleClick(e) {\n//     e.preventDefault();\n//     console.log('default action of a tag was prevented');\n//   }\n//   return (\n//     <a href='#' onClick={handleClick}>click me</a>\n//   )\n// }\n\n//example to determine what is this in Component\n// class Clock extends React.Component {\n//   static counter=0;\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: props.done, date: new Date()}\n//   }\n//   componentDidMount() {\n//     if(Clock.counter > 0) {\n//       setInterval(() => {\n//         this.setState({date: new Date()})\n//       }, 1000)\n//     } else {\n//       console.log('blabla');\n//       Clock.counter++\n//     }\n//   }\n//   render() {\n//     return(\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n\n\n// class ButtonforFb extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: true};\n//     this.handleClick = this.handleClick.bind(this)  \n//   }\n//   handleClick() {\n//     document.location.href = 'https://www.facebook.com/';\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick} >click me</button>\n//     )\n//   }\n// }\n\n//class component event listener Togle\n// class Toggle extends React.Component  {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState((state) => {\n//       return {isToggleOn: !state.isToggleOn}\n//     });\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//       {this.state.isToggleOn ? 'On' : 'Off'}\n//     </button>\n//     )\n//   }\n// }\n// class Toggle extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n\n//     // This binding is necessary to make `this` work in the callback\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n\n//   handleClick() {\n//     this.setState(state => ({\n//       isToggleOn: !state.isToggleOn\n//     }));\n//   }\n\n//get around binding this example be careful\n// class LoggingButton extends React.Component {\n//   // This syntax ensures `this` is bound within handleClick.\n//   // Warning: this is *experimental* syntax.\n//   handleClick = () => {\n//     console.log('this is:', this); //LogingButton copy (wrapped)\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//         Click me\n//       </button>\n//     );\n//   }\n// }\n//2 \n// class LoggingButton extends React.Component {\n//   handleClick() {\n//     console.log(this); //wrapper created by LoggingButton\n//   }\n//   // notice that we call this.handleClick in arrow function\n//   render() {\n//     return(\n//       <button onClick={() => this.handleClick()}> \n//         click me\n//       </button>\n//     )\n//   }\n// }\n//3\n// class LoggingButton extends React.Component {\n//   handleClick(e) {\n//     console.log(e);\n//   }\n//   render() {\n//     //1\n//     return (\n//       <button onClick={(e) => this.handleClick(e)}>click me</button>\n//     )\n//   }\n// }\n//         //passing arguments to event handlers --> handleClick.bind(this, arg1,arg2)\n\n\n                            //Conditional Rendering\n\n//ex greeting start of example \n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n// function GuestGreeting(props) {\n//   return <h1>Please Sign in or up</h1>\n// }\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if(isLoggedIn) {\n//     return <UserGreeting/>\n//   }\n//   return <GuestGreeting/>\n// }\n// //Logout an loggin buttons\n// function LogginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Login</button>\n//   )\n// }\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Logout</button>\n//   )\n// }\n// // class Loggin control that use Greetings and LogButtons\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false}\n//   }\n//   //callbacks\n//   handleLoginClick(){\n//     this.setState({isLoggedIn: true})\n//   }\n//   handleLogoutClick(){\n//     this.setState({isLoggedIn: false})\n//   }\n  \n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//     if(isLoggedIn) {\n//       button = <LogoutButton onClick={this.handleLogoutClick}/>\n//     } else {\n//       button = <LogginButton onClick={this.handleLoginClick}/>\n//     }\n\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn}/>\n//         {button}\n//       </div>\n//     )\n//   }\n// }\n//finish of example above\n\n\n        //inline if with logical && operator\n\n//ex with inline && operator\n// function Mailbox(props) {\n//   const unreadMessages = props.unreadMessages;\n//   return (\n//     <div>\n//       <h1>Hello</h1>\n//       {unreadMessages.length > 0 && \n//       <h1>\n//         You have {unreadMessages.length} unread messages\n//       </h1>\n//       }\n//     </div>\n//   )\n// }\n// const messages = ['React', 'Re: React', 'Re:Re:React']; //<Mailbox unreadMessages={messages}/> render it\n\n    //#preventing components from Rendering\n//start\n// function WarningBanner(props) {\n//   if(!props.warn) {\n//     return null;\n//   }\n//   return (\n//     <div className=\"warning\">\n//       Waringing!\n//     </div>\n//   )\n// }\n// class Page extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {showWarning: true};\n//     this.handleToggleClick = this.handleToggleClick.bind(this)\n//   }\n//   handleToggleClick() {\n//     this.setState(state => {\n//       return {showWarning: !state.showWarning}\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//       <WarningBanner warn={this.state.showWarning} />\n//       <button onClick={this.handleToggleClick}>\n//         {this.state.showWarning ? 'hide' : 'show'}\n//       </button>\n//       </div>\n//     )\n//   }\n// }\n//end, render Page\n\n    //lists and keys \n//example bullets of li items in ul\n// const numbers = [1,2,3,4,5];\n// const lists = numbers.map(number => <li>{number}</li>);\n// const result = <ul>{lists}</ul>\n//end render {result} in div of app\n\n//list inside a component\nfunction NumberLists (props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map(number => <li>{number}</li>);\n  return (<ul>{listItems}</ul>)\n}\nconst numbers = [1,2,3,4,5];\n//end render <NumberLists numbers={numbers}/>\nfunction App() {\n  return (\n    <div>\n      <NumberLists numbers={numbers}/>\n    </div>\n  )\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}