{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState } from 'react'; //// example embedding expressions in JSX\n// function App() {\n//   function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n//   }\n//   const user = {\n//     firstName: 'Harper',\n//     lastName: 'Perez'\n//   };\n//   const element = (\n//     <h1>\n//       Hello, {formatName(user)}!\n//     </h1>\n//   );\n//   return (\n//     <div>{element}</div>\n//   );\n// }\n////jsx is an expression too\n// function App() {\n//   let obj = {ando: '16'}\n//   let element = obj.ando ? <h1>{obj.ando}</h1> : <h1>Ando</h1>\n//   return element\n// }\n//jsx may contain children\n// function App() {\n//   let avatars = {urdl:'https://s1.1zoom.me/big7/216/_445833.jpg'};\n//   let img = <img src={avatars.urdl}/>\n//   // or img = <img src='https://s1.1zoom.me/big7/216/_445833.jpg'/>\n//   let element = (\n//     <div>\n//       <h1>barev!</h1>\n//       <h2>Arev!</h2>\n//       {img}\n//     </div>\n//   )\n//   return element\n// }\n// const App = () => {\n//   let element = <h1>barev</h1>;\n//   //same\n//   let element1 = React.createElement(\n//     'h1',\n//     {className: 'greeting'},\n//     'hellow world'\n//   )\n// }\n//Rendering components\n// function Welcome({name}) {\n//   return <h1>{name}</h1>\n// }\n// function App() {\n//   return(\n//   <div>\n//     <Welcome name=\"Andranik\"/>\n//     <Welcome name=\"Hayk\"/>\n//     <Welcome name=\"Sara\"/>\n//   </div>\n//   )\n// }\n//clock component update itself every second\n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.props.date.toLocaleTimeString()}</h2>\n//       </div>\n//       //from now after creating some component I will not delete and reset again function App\n//     )\n//   }\n// }\n//step two replace this.props.date with this.state.date\n// class Clock extends React.Component {\n//   render() {\n//         return (\n//           <div>\n//             <h1>Hello Ando</h1>\n//             <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//           </div>\n//         )\n//       }\n// }\n//step3 Add a class constructor that assigns the initial this.state\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props); //(*)\n//     this.state = {date: new Date()}\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n//step 4 add a timer code to component itself\n//adding lifecycle methods componentDidMount and ComponentWillUnmount\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n// }\n//step5 implementing method tick and setting state (changing initial state by interval)\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}\n//   }\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000)\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n//   tick() {\n//     this.setState({date: new Date()});\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n//clock component without method tick\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   tick() {\n//     this.setState({date: new Date()})\n//   }\n//   componentDidMount() {\n//     setInterval(this.tick.bind(this),1000); //do not forget about losing this\n//   }\n//   render() {\n//     return (\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n//a component may choose to pass its state down as props to its child components\n//component would receive the data in its props and wouldn't know where it comes, it can comes from parent props or state doesn't metter;\n// function FormattedDate(props) {\n//   return <h2>{props.date.toLocaleTimeString()}</h2>\n// }\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.setState({date: props.date});\n//   }\n//   render() {\n//     return (\n//       <FormattedDate date={this.props.date}/>\n//     )\n//   }\n// }\n//creating App1 component which receives 3 Clocks component\n// class Clock extends React.Component {\n//   // notice that if we not give props it will not throws undefined it throws ''\n//   constructor(props) {\n//     super(props);\n//     // this.state = {date: 15}\n//     this.state = {date: props.date}\n//   }\n//   // componentDidMount() {\n//   //   setInterval(() => this.setState({date: ++this.state.date}),1000);\n//   //   //Attention please here this.state.date++ is not setting new state;\n//   //   //this.setState({date: new Date()}) // in this case without toLocaleTimeString method will be an Error\n//   // }\n//   render() {\n//     return (<h1>{this.state.date}</h1>);\n//   }\n// }\n//Handling events\n// function forButton() {\n//   console.log('there was a click');\n// }// when we are working with buttons we should use camelCase rather than lowercase and use curly braces insted string\n// let button = (\n//   <button onClick={forButton}>click me</button>\n// )\n//2cannot prevent default by returning false\n//in ActionLink component we declare a fanction that preventing the default action of button which was returned by ActionLink component\n// function ActionLink() {\n//   function handleClick(e) {\n//     e.preventDefault();\n//     console.log('default action of a tag was prevented');\n//   }\n//   return (\n//     <a href='#' onClick={handleClick}>click me</a>\n//   )\n// }\n//example to determine what is this in Component\n// class Clock extends React.Component {\n//   static counter=0;\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: props.done, date: new Date()}\n//   }\n//   componentDidMount() {\n//     if(Clock.counter > 0) {\n//       setInterval(() => {\n//         this.setState({date: new Date()})\n//       }, 1000)\n//     } else {\n//       console.log('blabla');\n//       Clock.counter++\n//     }\n//   }\n//   render() {\n//     return(\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n// class ButtonforFb extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: true};\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n//   handleClick() {\n//     document.location.href = 'https://www.facebook.com/';\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick} >click me</button>\n//     )\n//   }\n// }\n//class component event listener Togle\n// class Toggle extends React.Component  {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState((state) => {\n//       return {isToggleOn: !state.isToggleOn}\n//     });\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//       {this.state.isToggleOn ? 'On' : 'Off'}\n//     </button>\n//     )\n//   }\n// }\n// class Toggle extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     // This binding is necessary to make `this` work in the callback\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState(state => ({\n//       isToggleOn: !state.isToggleOn\n//     }));\n//   }\n//get around binding this example be careful\n// class LoggingButton extends React.Component {\n//   // This syntax ensures `this` is bound within handleClick.\n//   // Warning: this is *experimental* syntax.\n//   handleClick = () => {\n//     console.log('this is:', this); //LogingButton copy (wrapped)\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//         Click me\n//       </button>\n//     );\n//   }\n// }\n//2\n// class LoggingButton extends React.Component {\n//   handleClick() {\n//     console.log(this); //wrapper created by LoggingButton\n//   }\n//   // notice that we call this.handleClick in arrow function\n//   render() {\n//     return(\n//       <button onClick={() => this.handleClick()}>\n//         click me\n//       </button>\n//     )\n//   }\n// }\n//3\n// class LoggingButton extends React.Component {\n//   handleClick(e) {\n//     console.log(e);\n//   }\n//   render() {\n//     //1\n//     return (\n//       <button onClick={(e) => this.handleClick(e)}>click me</button>\n//     )\n//   }\n// }\n//         //passing arguments to event handlers --> handleClick.bind(this, arg1,arg2)\n//Conditional Rendering\n//ex greeting start of example\n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n// function GuestGreeting(props) {\n//   return <h1>Please Sign in or up</h1>\n// }\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if(isLoggedIn) {\n//     return <UserGreeting/>\n//   }\n//   return <GuestGreeting/>\n// }\n// //Logout an loggin buttons\n// function LogginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Login</button>\n//   )\n// }\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Logout</button>\n//   )\n// }\n// // class Loggin control that use Greetings and LogButtons\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false}\n//   }\n//   //callbacks\n//   handleLoginClick(){\n//     this.setState({isLoggedIn: true})\n//   }\n//   handleLogoutClick(){\n//     this.setState({isLoggedIn: false})\n//   }\n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//     if(isLoggedIn) {\n//       button = <LogoutButton onClick={this.handleLogoutClick}/>\n//     } else {\n//       button = <LogginButton onClick={this.handleLoginClick}/>\n//     }\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn}/>\n//         {button}\n//       </div>\n//     )\n//   }\n// }\n//finish of example above\n//inline if with logical && operator\n//ex with inline && operator\n// function Mailbox(props) {\n//   const unreadMessages = props.unreadMessages;\n//   return (\n//     <div>\n//       <h1>Hello</h1>\n//       {unreadMessages.length > 0 &&\n//       <h1>\n//         You have {unreadMessages.length} unread messages\n//       </h1>\n//       }\n//     </div>\n//   )\n// }\n// const messages = ['React', 'Re: React', 'Re:Re:React']; //<Mailbox unreadMessages={messages}/> render it\n//#preventing components from Rendering\n//start\n// function WarningBanner(props) {\n//   if(!props.warn) {\n//     return null;\n//   }\n//   return (\n//     <div className=\"warning\">\n//       Waringing!\n//     </div>\n//   )\n// }\n// class Page extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {showWarning: true};\n//     this.handleToggleClick = this.handleToggleClick.bind(this)\n//   }\n//   handleToggleClick() {\n//     this.setState(state => {\n//       return {showWarning: !state.showWarning}\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//       <WarningBanner warn={this.state.showWarning} />\n//       <button onClick={this.handleToggleClick}>\n//         {this.state.showWarning ? 'hide' : 'show'}\n//       </button>\n//       </div>\n//     )\n//   }\n// }\n//end, render Page\n//lists and keys\n//example bullets of li items in ul\n// const numbers = [1,2,3,4,5];\n// const lists = numbers.map(number => <li>{number}</li>);\n// const result = <ul>{lists}</ul>\n//end render {result} in div of app\n//list inside a component\n// function NumberLists (props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number => <li>{number}</li>);\n//   return (<ul>{listItems}</ul>)\n// }\n// const numbers = [1,2,3,4,5];\n//end render <NumberLists numbers={numbers}/>\n//fix the missing key issue\n// function NumberLists (props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number => <li key={number.toString()}>{number}</li>);\n//   return (<ul>{listItems}</ul>)\n// }\n// const numbers = [1,2,3,4,5];\n//extracting components with keys\n//wrong example will go first do not use such that\n//start\n// function ListItem(props) {\n//   const value = props.value;\n//   return (\n//     //wrong!!! there is no need to specify key here\n//     <li key={value.toString()}>{value}</li>\n//   )\n// }\n// function NumberLists(props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number =>\n//     //wrong!@ the key should have been specified here\n//       <ListItem value={number}/>\n//     );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n// }\n// const numbers = [1,2,3,4,5];\n// //end of wrong example render <NumberLists numbers={numbers}/>\n//start of Correct key usage\n// function ListItem(props) {\n//   return (\n//     //Correct! there is no need to specify key here\n//     <li>{props.value}</li>\n//   )\n// }\n// function NumberLists(props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number =>\n//     //!Correct key should be specified inside the array\n//     <ListItem key={number.toString()} value={number}/>\n//     );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n// }\n//or instead of NumberList component use example below\n// function NumberList(props) {\n//   const numbers = props.numbers;\n//   return (\n//     <ul>\n//       {numbers.map((number) =>\n//         <ListItem key={number.toString()}\n//                   value={number} />\n//       )}\n//     </ul>\n//   );\n// }\n// const numbers = [1,2,3,4,5];\n//end of correct usage of key render  <NumberLists numbers={numbers}/>\n//notice that above we have same name compoent please comments any one of them, before render NumberLists\n//Forms\n//log the name form as a \"Controlled component\"\n//notice that onsubmit have set on form but onChange on input\n// class NameForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: ''}\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   //the argument is event\n//   handleChange(event) {\n//     this.setState(state => {\n//       return {value: event.target.value}\n//     });\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value + ' have written');\n//     this.setState(stat => ({value: ''}))\n//     // prenteses around or will not able to write in short\n//     //this.setState(state => {value: ''}) // error\n//     event.preventDefault(); // remember that we cant return '' for preventing default in react\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//       <label>\n//         Name:\n//         <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n//       </label>\n//       <input type=\"submit\" value=\"Submit\"/>\n//     </form>\n//     )\n//   }\n// }\n////end of example\n//start of example textarea tag in react\n// class EssayForms extends React.Component {\n//   constructor(props) {\n//     console.log(React.Component);\n//     super(props);\n//     this.state = {value: 'this is value of textarea tag'};\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleChange(event) {\n//     this.setState(state => ({value: event.target.value}))\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value);\n//     this.setState({value: ''});\n//     event.preventDefault();\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Essay:\n//           <textarea value={this.state.value} onChange={this.handleChange}/>\n//         </label>\n//         <input type='submit' value=\"Submit\"/>\n//         {/*type shold be submit otherwise onSubmit should not work*/}\n//       </form>\n//     )\n//   }\n// }\n//end of example\n//Select tag in React, notice that selected attribute is missing\n// class FlavorForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: 'coconut'};\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.initialState = this.state.value; //to set first states value //\n//   }\n//   //in this field we do not have what have constructor's this we cant get for example\n//   handleChange(event) {\n//     this.setState(state => ({value: event.target.value}));\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value);\n//     this.setState(state => ({value: FlavorForm.initial}));\n//     event.preventDefault()\n//   }\n//   render() {\n//     return(\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Pick your favorite flavor:\n//           <select value={this.state.value} onChange={this.handleChange}>\n//             <option value=\"grapefruit\">GrapeFruit</option>\n//             <option value=\"lime\">Lime</option>\n//             <option value=\"coconut\">Coconut</option>\n//             <option value=\"mango\">Mango</option>\n//           </select>\n//         </label>\n//         <input type='submit' value='Submit'/>\n//       </form>\n//     )\n//   }\n// }\n////end of example\n// class FlavorForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: 'coconut'};\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleChange(event) {\n//     this.setState({value: event.target.value});\n//   }\n//   handleSubmit(event) {\n//     alert('Your favorite flavor is: ' + this.state.value);\n//     event.preventDefault();\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Pick your favorite flavor:\n//           <select value={this.state.value} onChange={this.handleChange}>\n//             <option value=\"grapefruit\">Grapefruit</option>\n//             <option value=\"lime\">Lime</option>\n//             <option value=\"coconut\">Coconut</option>\n//             <option value=\"mango\">Mango</option>\n//           </select>\n//         </label>\n//         <input type=\"submit\" value=\"Submit\" />\n//       </form>\n//     );\n//   }\n// }\n//handling multyple inputs example\n// class Reservation extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       isGoing: true,\n//       numberOfGuests: 2,\n//     }\n//     this.handleInputChange = this.handleInputChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleInputChange(event) {\n//       const target = event.target;\n//       const value = target.type === 'checkbox' ? target.checked : target.value;\n//       const name = target.name;\n//       this.setState({\n//         [name]: value,\n//       })\n//   }\n//   handleSubmit(event) {\n//     console.log(`{isGoing: ${this.state.isGoing}, numberOfGuests: ${this.state.numberOfGuests}}`);\n//     event.preventDefault()\n//   }\n//   render() {\n//     return(\n//       <form onSubmit={this.handleSubmit} >\n//         {/* onchange should be on inputs seperately not only on the form itself */}\n//         <label>\n//           Is going:\n//           <input\n//           name=\"isGoing\"\n//           type=\"checkbox\"\n//           checked={this.state.isGoing}\n//           onChange={this.handleInputChange}/>\n//         </label>\n//         <br/>\n//         <label>\n//           Number of guests:\n//           <input\n//           name=\"numberOfGuests\"\n//           type=\"number\"\n//           value={this.state.numberOfGuests}\n//           onChange={this.handleInputChange} />\n//         </label>\n//         <input type='submit' value='Submit'/>\n//       </form>\n//     )\n//   }\n// }\n////end of example\n// let input = <input value=\"hi\"/> //non editabel example\n// let input = <input value={null}/>// editable example\n//Lifting state up\n//start of example with boiling water\n// function BoilingVerdict(props) {\n//   return props.celcius >= 100\n//   ? <p>The water would boil</p>\n//   : <p>The water would not boil</p>\n// }\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {temperature: ''}\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(e) {\n//     this.setState({temperature: e.target.value});\n//   }\n//   render() {\n//     const temperature = this.state.temperature;\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in celcius</legend>\n//         <input value={temperature}\n//         onChange={this.handleChange}/>\n//         <BoilingVerdict celcius={temperature}/>\n//       </fieldset>\n//     )\n//   }\n// }\n//end of example\n//// start Adding a second input as for farenheit work sync.\n// const scaleNames = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// }\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleChange = this.handleChange.bind(this);\n//     this.state = {temperature: ''}\n//   }\n//   handleChange(e) {\n//     this.setState({temperature: e.target.value})\n//   }\n//   render() {\n//     const temperature = this.state.temperature;\n//     const scale = this.props.scale;\n//     return (\n//       <fieldset>\n//         <legend>Enter a temperature in {scaleNames[scale]}</legend>\n//         <input\n//         onChange={this.handleChange}\n//         value={temperature} />\n//       </fieldset>\n//     )\n//   }\n// }\n// //// need to change calculateor to render two seperate temperature inputs\n// class Calculator extends React.Component {\n//   render() {\n//     return(\n//       <div>\n//         <TemperatureInput scale='c'/>\n//         <TemperatureInput scale='f'/>\n//       </div>\n//     )\n//   }\n// }\n// //conversion functions\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n// function tryConvert(temperature, convert) {\n//   const input = parseFloat(temperature);\n//   if(Number.isNaN(input)) {\n//     return ''\n//   }\n//   const output = convert(input);\n//   const rounded = Math.round(outpoot * 1000) / 1000;\n//   return rounded.toString();\n// }\n// end of not finished example\n//finish example of Lifting up state\n// const scaleNames = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// };\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n// function tryConvert(temperature, convert) {\n//   const input = parseFloat(temperature);\n//   if (Number.isNaN(input)) {\n//     return '';\n//   }\n//   const output = convert(input);\n//   const rounded = Math.round(output * 1000) / 1000;\n//   return rounded.toString();\n// }\n// function BoilingVerdict(props) {\n//   if (props.celsius >= 100) {\n//     return <p>The water would boil.</p>;\n//   }\n//   return <p>The water would not boil.</p>;\n// }\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(e) {\n//     this.props.onTemperatureChange(e.target.value);\n//   }\n//   render() {\n//     const temperature = this.props.temperature;\n//     const scale = this.props.scale;\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in {scaleNames[scale]}:</legend>\n//         <input value={temperature}\n//                onChange={this.handleChange} />\n//       </fieldset>\n//     );\n//   }\n// }\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n//     this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n//     this.state = {temperature: '', scale: 'c'};\n//   }\n//   handleCelsiusChange(temperature) {\n//     this.setState({scale: 'c', temperature});\n//   }\n//   handleFahrenheitChange(temperature) {\n//     this.setState({scale: 'f', temperature});\n//   }\n//   render() {\n//     const scale = this.state.scale;\n//     const temperature = this.state.temperature;\n//     const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n//     const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n//     return (\n//       <div>\n//         <TemperatureInput\n//           scale=\"c\"\n//           temperature={celsius}\n//           onTemperatureChange={this.handleCelsiusChange} />\n//         <TemperatureInput\n//           scale=\"f\"\n//           temperature={fahrenheit}\n//           onTemperatureChange={this.handleFahrenheitChange} />\n//         <BoilingVerdict\n//           celsius={parseFloat(celsius)} />\n//       </div>\n//     );\n//   }\n// }\n//end of fucking big example\n//not homework it is up to you create two inputs dollar dram wich will work sync\n//Composition vs inheritance\n//example of children include css 1-15\n// function FancyBorder(props) {\n//   return(\n//     <div className={'FancyBorder FancyBorder-' + props.color}>\n//       {props.children}\n//     </div>\n//   )\n// }\n// function WelcomeDialog(props) {\n//   return (\n//     <FancyBorder color='blue'>\n//       <h1 className='Dialog-title'>Welcome</h1>\n//       <p className=\"Dialog-message\">Thank you for visiting our spacecraft!</p>\n//     </FancyBorder>\n//   )\n// }\n//end of example\n//own convention instead of using children\n//specilization\n// function FancyBorder(props) {\n//   return (\n//     <div className={'FancyBorder FancyBorder-' + props.color}>\n//       {props.children}\n//     </div>\n//   );\n// }\n// function Dialog(props) {\n//   return (\n//     <FancyBorder color=\"blue\">\n//       <h1 className=\"Dialog-title\">\n//         {props.title}\n//       </h1>\n//       <p className=\"Dialog-message\">\n//         {props.message}\n//       </p>\n//     </FancyBorder>\n//   );\n// }\n// function WelcomeDialog() {\n//   return (\n//     <Dialog\n//       title=\"Welcome\"\n//       message=\"Thank you for visiting our spacecraft!\" />\n//   );\n//   }\n//   // includes cs end of example 19-37\n//composition works also with class components start of example includes css 39-56\n//\n// function FancyBorder(props) {\n//   return (\n//     <div className={'FancyBorder FancyBorder-' + props.color}>\n//       {props.children}\n//     </div>\n//   );\n// }\n// function Dialog(props) {\n//   return (\n//     <FancyBorder color=\"blue\">\n//       <h1 className=\"Dialog-title\">\n//         {props.title}\n//       </h1>\n//       <p className=\"Dialog-message\">\n//         {props.message}\n//       </p>\n//       {props.children}\n//     </FancyBorder>\n//   );\n// }\n// class SignUpDialog extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSignUp = this.handleSignUp.bind(this);\n//     this.state = {login: ''};\n//   }\n//   render() {\n//     return (\n//       <Dialog title=\"Mars Exploration Program\"\n//               message=\"How should we refer to you?\">\n//         <input value={this.state.login}\n//                onChange={this.handleChange} />\n//         <button onClick={this.handleSignUp}>\n//           Sign Me Up!\n//         </button>\n//       </Dialog>\n//     );\n//   }\n//   handleChange(e) {\n//     this.setState({login: e.target.value});\n//   }\n//   handleSignUp() {\n//     alert(`Welcome aboard, ${this.state.login}!`);\n//   }\n// }\n// end of example\n//start of thinking in react example includes css 59\n//  class ProductCategoryRow extends React.Component {\n//   render() {\n//     const category = this.props.category;\n//     return (\n//       <tr>\n//         <th colSpan=\"2\">\n//           {category}\n//         </th>\n//       </tr>\n//     );\n//   }\n// }\n// class ProductRow extends React.Component {\n//   render() {\n//     const product = this.props.product;\n//     const name = product.stocked ?\n//       product.name :\n//       <span style={{color: 'red'}}>\n//         {product.name}\n//       </span>;\n//     return (\n//       <tr>\n//         <td>{name}</td>\n//         <td>{product.price}</td>\n//       </tr>\n//     );\n//   }\n// }\n// class ProductTable extends React.Component {\n//   render() {\n//     const filterText = this.props.filterText;\n//     const inStockOnly = this.props.inStockOnly;\n//     const rows = [];\n//     let lastCategory = null;\n//     this.props.products.forEach((product) => {\n//       if (product.name.indexOf(filterText) === -1) {\n//         return;\n//       }\n//       if (inStockOnly && !product.stocked) {\n//         return;\n//       }\n//       if (product.category !== lastCategory) {\n//         rows.push(\n//           <ProductCategoryRow\n//             category={product.category}\n//             key={product.category} />\n//         );\n//       }\n//       rows.push(\n//         <ProductRow\n//           product={product}\n//           key={product.name}\n//         />\n//       );\n//       lastCategory = product.category;\n//     });\n//     return (\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Price</th>\n//           </tr>\n//         </thead>\n//         <tbody>{rows}</tbody>\n//       </table>\n//     );\n//   }\n// }\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n//     this.handleInStockChange = this.handleInStockChange.bind(this);\n//   }\n//   handleFilterTextChange(e) {\n//     this.props.onFilterTextChange(e.target.value);\n//   }\n//   handleInStockChange(e) {\n//     this.props.onInStockChange(e.target.checked);\n//   }\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={this.props.filterText}\n//           onChange={this.handleFilterTextChange}\n//         />\n//         <p>\n//           <input\n//             type=\"checkbox\"\n//             checked={this.props.inStockOnly}\n//             onChange={this.handleInStockChange}\n//           />\n//           {' '}\n//           Only show products in stock\n//         </p>\n//       </form>\n//     );\n//   }\n// }\n// class FilterableProductTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       filterText: '',\n//       inStockOnly: false\n//     };\n//     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n//     this.handleInStockChange = this.handleInStockChange.bind(this);\n//   }\n//   handleFilterTextChange(filterText) {\n//     this.setState({\n//       filterText: filterText\n//     });\n//   }\n//   handleInStockChange(inStockOnly) {\n//     this.setState({\n//       inStockOnly: inStockOnly\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <SearchBar\n//           filterText={this.state.filterText}\n//           inStockOnly={this.state.inStockOnly}\n//           onFilterTextChange={this.handleFilterTextChange}\n//           onInStockChange={this.handleInStockChange}\n//         />\n//         <ProductTable\n//           products={this.props.products}\n//           filterText={this.state.filterText}\n//           inStockOnly={this.state.inStockOnly}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// const PRODUCTS = [\n//   {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n//   {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n//   {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n//   {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n//   {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n//   {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n// ];\n//end of example\n//HOOKS\n//example of hooks\n// import React, { useState } from 'react';\n// function Example() {\n//   // Declare a new state variable, which we'll call \"count\"\n//   const [count, setCount] = useState(0);\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n// function FirstHook(props) {\n//   let [name, setName] = useState('Ando');\n//   let [surname, setSurname] = useState('Tsaturyan');\n//   function handleNameChange(e) {\n//     name = e.target.value;\n//   }\n//   function handleSurnameChange(e) {\n//     setName(e.target.value);\n//   }\n//   function handleSurnameChange(e) {\n//     setSurname(e.target.value);\n//   }\n//   return(\n//     <div>\n//       <input\n//       value={name}\n//       onChange={handleNameChange}\n//       />\n//       <input\n//       value={surname}\n//       onChange={handleSurnameChange}\n//       />\n//     </div>\n//   )\n// }\n// Arturs burger example\n// class Burger extends React.Component {\n//   constructor(props) {\n//       super(props)\n//       this.burger = this.burger.bind(this)\n//       this.state = { classList: ['', '', ''], burgerOpen: false }\n//   }\n//   burger(e) {\n//       e.preventDefault()\n//       if (!this.state.burgerOpen) {\n//           this.setState((state) => ({\n//               classList: (state.classList = ['first', 'second', 'third']),\n//               burgerOpen: !state.burgerOpen,\n//           }))\n//       } else {\n//           this.setState((state) => ({\n//               classList: (state.classList = ['', '', '']),\n//               burgerOpen: !state.burgerOpen,\n//           }))\n//       }\n//       console.log(this.state)\n//   }\n//   render() {\n//       return (\n//           <div className=\"main_burger\">\n//               <div onClick={this.burger} className=\"main_burger_btn\">\n//                   <div className={this.state.classList[0]}></div>\n//                   <div className={this.state.classList[1]}></div>\n//                   <div className={this.state.classList[2]}></div>\n//               </div>\n//           </div>\n//       )\n//   }\n// }\n//step by step redux creating to do list\n//\n\nfunction App(props) {\n  _s();\n\n  const [name, setName] = useState('Armen');\n  const [letter, setLetter] = useState(null);\n  useEffect(() => {\n    if (!letter) {\n      console.log('chka');\n    } else {\n      setLetter('barev ka');\n    }\n\n    console.log('barev ka ');\n  }, [name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setName(name + 'b'),\n      children: \"click me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1321,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1319,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"Qogs2ayyAOK8S9l8FsPjOM+q7tI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/App.js"],"names":["React","useState","App","props","name","setName","letter","setLetter","useEffect","console","log"],"mappings":";;;;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAeC,QAAfoB;AAEpB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGoB;AAEpyB;AAC1B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,OAAD,CAAhC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AACAO,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACF,MAAJ,EAAY;AACRG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,KAFD,MAEO;AACHH,MAAAA,SAAS,CAAC,UAAD,CAAT;AACH;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEH,GARQ,EAQN,CAACN,IAAD,CARM,CAAT;AASA,sBACI;AAAA,4BACI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAMC,OAAO,CAACD,IAAI,GAAG,GAAR,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAlBQF,G;;KAAAA,G;AAmBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\n\n//// example embedding expressions in JSX\n// function App() {\n//   function formatName(user) {\n//     return user.firstName + ' ' + user.lastName;\n//   }\n\n//   const user = {\n//     firstName: 'Harper',\n//     lastName: 'Perez'\n//   };\n\n//   const element = (\n//     <h1>\n//       Hello, {formatName(user)}!\n//     </h1>\n//   );\n//   return (\n//     <div>{element}</div>\n//   );\n// }\n\n////jsx is an expression too\n// function App() {\n//   let obj = {ando: '16'}\n//   let element = obj.ando ? <h1>{obj.ando}</h1> : <h1>Ando</h1>\n//   return element\n// }\n\n//jsx may contain children\n// function App() {\n//   let avatars = {urdl:'https://s1.1zoom.me/big7/216/_445833.jpg'};\n//   let img = <img src={avatars.urdl}/>\n//   // or img = <img src='https://s1.1zoom.me/big7/216/_445833.jpg'/>\n//   let element = (\n//     <div>\n//       <h1>barev!</h1>\n//       <h2>Arev!</h2>\n//       {img}\n//     </div>\n//   )\n//   return element\n// }\n\n// const App = () => {\n//   let element = <h1>barev</h1>;\n//   //same\n//   let element1 = React.createElement(\n//     'h1',\n//     {className: 'greeting'},\n//     'hellow world'\n//   )\n// }\n\n//Rendering components\n// function Welcome({name}) {\n//   return <h1>{name}</h1>\n// }\n// function App() {\n//   return(\n//   <div>\n//     <Welcome name=\"Andranik\"/>\n//     <Welcome name=\"Hayk\"/>\n//     <Welcome name=\"Sara\"/>\n//   </div>\n//   )\n// }\n\n//clock component update itself every second\n// class Clock extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.props.date.toLocaleTimeString()}</h2>\n//       </div>\n//       //from now after creating some component I will not delete and reset again function App\n//     )\n//   }\n// }\n//step two replace this.props.date with this.state.date\n// class Clock extends React.Component {\n//   render() {\n//         return (\n//           <div>\n//             <h1>Hello Ando</h1>\n//             <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//           </div>\n//         )\n//       }\n// }\n//step3 Add a class constructor that assigns the initial this.state\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props); //(*)\n//     this.state = {date: new Date()}\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n//step 4 add a timer code to component itself\n//adding lifecycle methods componentDidMount and ComponentWillUnmount\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n// }\n//step5 implementing method tick and setting state (changing initial state by interval)\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()}\n//   }\n\n//   componentDidMount() {\n//     this.timerId = setInterval(() => this.tick(), 1000)\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n//   tick() {\n//     this.setState({date: new Date()});\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>Hello Ando</h1>\n//         <h2>we are creating clock {this.state.date.toLocaleTimeString()}</h2>\n//       </div>\n//     )\n//   }\n// }\n\n//clock component without method tick\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {date: new Date()};\n//   }\n//   tick() {\n//     this.setState({date: new Date()})\n//   }\n//   componentDidMount() {\n//     setInterval(this.tick.bind(this),1000); //do not forget about losing this\n//   }\n//   render() {\n//     return (\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n\n//a component may choose to pass its state down as props to its child components\n//component would receive the data in its props and wouldn't know where it comes, it can comes from parent props or state doesn't metter;\n\n// function FormattedDate(props) {\n//   return <h2>{props.date.toLocaleTimeString()}</h2>\n// }\n// class Clock extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.setState({date: props.date});\n//   }\n//   render() {\n//     return (\n//       <FormattedDate date={this.props.date}/>\n//     )\n//   }\n// }\n\n//creating App1 component which receives 3 Clocks component\n// class Clock extends React.Component {\n//   // notice that if we not give props it will not throws undefined it throws ''\n//   constructor(props) {\n//     super(props);\n//     // this.state = {date: 15}\n//     this.state = {date: props.date}\n//   }\n//   // componentDidMount() {\n//   //   setInterval(() => this.setState({date: ++this.state.date}),1000);\n//   //   //Attention please here this.state.date++ is not setting new state;\n//   //   //this.setState({date: new Date()}) // in this case without toLocaleTimeString method will be an Error\n//   // }\n//   render() {\n//     return (<h1>{this.state.date}</h1>);\n//   }\n// }\n\n\n      //Handling events\n// function forButton() {\n//   console.log('there was a click');\n// }// when we are working with buttons we should use camelCase rather than lowercase and use curly braces insted string\n// let button = (\n//   <button onClick={forButton}>click me</button>\n// )\n\n//2cannot prevent default by returning false\n//in ActionLink component we declare a fanction that preventing the default action of button which was returned by ActionLink component\n// function ActionLink() {\n//   function handleClick(e) {\n//     e.preventDefault();\n//     console.log('default action of a tag was prevented');\n//   }\n//   return (\n//     <a href='#' onClick={handleClick}>click me</a>\n//   )\n// }\n\n//example to determine what is this in Component\n// class Clock extends React.Component {\n//   static counter=0;\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: props.done, date: new Date()}\n//   }\n//   componentDidMount() {\n//     if(Clock.counter > 0) {\n//       setInterval(() => {\n//         this.setState({date: new Date()})\n//       }, 1000)\n//     } else {\n//       console.log('blabla');\n//       Clock.counter++\n//     }\n//   }\n//   render() {\n//     return(\n//       <h1>{this.state.date.toLocaleTimeString()}</h1>\n//     )\n//   }\n// }\n\n\n// class ButtonforFb extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {done: true};\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n//   handleClick() {\n//     document.location.href = 'https://www.facebook.com/';\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick} >click me</button>\n//     )\n//   }\n// }\n\n//class component event listener Togle\n// class Toggle extends React.Component  {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick() {\n//     this.setState((state) => {\n//       return {isToggleOn: !state.isToggleOn}\n//     });\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//       {this.state.isToggleOn ? 'On' : 'Off'}\n//     </button>\n//     )\n//   }\n// }\n// class Toggle extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {isToggleOn: true};\n\n//     // This binding is necessary to make `this` work in the callback\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n\n//   handleClick() {\n//     this.setState(state => ({\n//       isToggleOn: !state.isToggleOn\n//     }));\n//   }\n\n//get around binding this example be careful\n// class LoggingButton extends React.Component {\n//   // This syntax ensures `this` is bound within handleClick.\n//   // Warning: this is *experimental* syntax.\n//   handleClick = () => {\n//     console.log('this is:', this); //LogingButton copy (wrapped)\n//   }\n//   render() {\n//     return (\n//       <button onClick={this.handleClick}>\n//         Click me\n//       </button>\n//     );\n//   }\n// }\n//2\n// class LoggingButton extends React.Component {\n//   handleClick() {\n//     console.log(this); //wrapper created by LoggingButton\n//   }\n//   // notice that we call this.handleClick in arrow function\n//   render() {\n//     return(\n//       <button onClick={() => this.handleClick()}>\n//         click me\n//       </button>\n//     )\n//   }\n// }\n//3\n// class LoggingButton extends React.Component {\n//   handleClick(e) {\n//     console.log(e);\n//   }\n//   render() {\n//     //1\n//     return (\n//       <button onClick={(e) => this.handleClick(e)}>click me</button>\n//     )\n//   }\n// }\n//         //passing arguments to event handlers --> handleClick.bind(this, arg1,arg2)\n\n\n                            //Conditional Rendering\n\n//ex greeting start of example\n// function UserGreeting(props) {\n//   return <h1>Welcome Back!</h1>\n// }\n// function GuestGreeting(props) {\n//   return <h1>Please Sign in or up</h1>\n// }\n// function Greeting(props) {\n//   const isLoggedIn = props.isLoggedIn;\n//   if(isLoggedIn) {\n//     return <UserGreeting/>\n//   }\n//   return <GuestGreeting/>\n// }\n// //Logout an loggin buttons\n// function LogginButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Login</button>\n//   )\n// }\n// function LogoutButton(props) {\n//   return (\n//     <button onClick={props.onClick}>Logout</button>\n//   )\n// }\n// // class Loggin control that use Greetings and LogButtons\n// class LoginControl extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleLoginClick = this.handleLoginClick.bind(this);\n//     this.handleLogoutClick = this.handleLogoutClick.bind(this);\n//     this.state = {isLoggedIn: false}\n//   }\n//   //callbacks\n//   handleLoginClick(){\n//     this.setState({isLoggedIn: true})\n//   }\n//   handleLogoutClick(){\n//     this.setState({isLoggedIn: false})\n//   }\n\n//   render() {\n//     const isLoggedIn = this.state.isLoggedIn;\n//     let button;\n//     if(isLoggedIn) {\n//       button = <LogoutButton onClick={this.handleLogoutClick}/>\n//     } else {\n//       button = <LogginButton onClick={this.handleLoginClick}/>\n//     }\n\n//     return (\n//       <div>\n//         <Greeting isLoggedIn={isLoggedIn}/>\n//         {button}\n//       </div>\n//     )\n//   }\n// }\n//finish of example above\n\n\n        //inline if with logical && operator\n\n//ex with inline && operator\n// function Mailbox(props) {\n//   const unreadMessages = props.unreadMessages;\n//   return (\n//     <div>\n//       <h1>Hello</h1>\n//       {unreadMessages.length > 0 &&\n//       <h1>\n//         You have {unreadMessages.length} unread messages\n//       </h1>\n//       }\n//     </div>\n//   )\n// }\n// const messages = ['React', 'Re: React', 'Re:Re:React']; //<Mailbox unreadMessages={messages}/> render it\n\n    //#preventing components from Rendering\n//start\n// function WarningBanner(props) {\n//   if(!props.warn) {\n//     return null;\n//   }\n//   return (\n//     <div className=\"warning\">\n//       Waringing!\n//     </div>\n//   )\n// }\n// class Page extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {showWarning: true};\n//     this.handleToggleClick = this.handleToggleClick.bind(this)\n//   }\n//   handleToggleClick() {\n//     this.setState(state => {\n//       return {showWarning: !state.showWarning}\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//       <WarningBanner warn={this.state.showWarning} />\n//       <button onClick={this.handleToggleClick}>\n//         {this.state.showWarning ? 'hide' : 'show'}\n//       </button>\n//       </div>\n//     )\n//   }\n// }\n//end, render Page\n\n    //lists and keys\n//example bullets of li items in ul\n// const numbers = [1,2,3,4,5];\n// const lists = numbers.map(number => <li>{number}</li>);\n// const result = <ul>{lists}</ul>\n//end render {result} in div of app\n\n//list inside a component\n// function NumberLists (props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number => <li>{number}</li>);\n//   return (<ul>{listItems}</ul>)\n// }\n// const numbers = [1,2,3,4,5];\n//end render <NumberLists numbers={numbers}/>\n\n//fix the missing key issue\n// function NumberLists (props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number => <li key={number.toString()}>{number}</li>);\n//   return (<ul>{listItems}</ul>)\n// }\n// const numbers = [1,2,3,4,5];\n\n//extracting components with keys\n//wrong example will go first do not use such that\n//start\n// function ListItem(props) {\n//   const value = props.value;\n//   return (\n//     //wrong!!! there is no need to specify key here\n//     <li key={value.toString()}>{value}</li>\n//   )\n// }\n// function NumberLists(props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number =>\n//     //wrong!@ the key should have been specified here\n//       <ListItem value={number}/>\n//     );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n// }\n// const numbers = [1,2,3,4,5];\n// //end of wrong example render <NumberLists numbers={numbers}/>\n\n//start of Correct key usage\n// function ListItem(props) {\n//   return (\n//     //Correct! there is no need to specify key here\n//     <li>{props.value}</li>\n//   )\n// }\n// function NumberLists(props) {\n//   const numbers = props.numbers;\n//   const listItems = numbers.map(number =>\n//     //!Correct key should be specified inside the array\n//     <ListItem key={number.toString()} value={number}/>\n//     );\n//   return (\n//     <ul>{listItems}</ul>\n//   )\n// }\n//or instead of NumberList component use example below\n// function NumberList(props) {\n//   const numbers = props.numbers;\n//   return (\n//     <ul>\n//       {numbers.map((number) =>\n//         <ListItem key={number.toString()}\n//                   value={number} />\n//       )}\n//     </ul>\n//   );\n// }\n// const numbers = [1,2,3,4,5];\n//end of correct usage of key render  <NumberLists numbers={numbers}/>\n//notice that above we have same name compoent please comments any one of them, before render NumberLists\n\n          //Forms\n//log the name form as a \"Controlled component\"\n//notice that onsubmit have set on form but onChange on input\n// class NameForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: ''}\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   //the argument is event\n//   handleChange(event) {\n//     this.setState(state => {\n//       return {value: event.target.value}\n//     });\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value + ' have written');\n//     this.setState(stat => ({value: ''}))\n//     // prenteses around or will not able to write in short\n//     //this.setState(state => {value: ''}) // error\n//     event.preventDefault(); // remember that we cant return '' for preventing default in react\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//       <label>\n//         Name:\n//         <input type=\"text\" value={this.state.value} onChange={this.handleChange}/>\n\n//       </label>\n//       <input type=\"submit\" value=\"Submit\"/>\n//     </form>\n//     )\n\n//   }\n// }\n////end of example\n\n//start of example textarea tag in react\n// class EssayForms extends React.Component {\n//   constructor(props) {\n//     console.log(React.Component);\n//     super(props);\n//     this.state = {value: 'this is value of textarea tag'};\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleChange(event) {\n//     this.setState(state => ({value: event.target.value}))\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value);\n//     this.setState({value: ''});\n//     event.preventDefault();\n//   }\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Essay:\n//           <textarea value={this.state.value} onChange={this.handleChange}/>\n//         </label>\n//         <input type='submit' value=\"Submit\"/>\n//         {/*type shold be submit otherwise onSubmit should not work*/}\n//       </form>\n//     )\n//   }\n// }\n//end of example\n\n//Select tag in React, notice that selected attribute is missing\n// class FlavorForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: 'coconut'};\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.initialState = this.state.value; //to set first states value //\n//   }\n//   //in this field we do not have what have constructor's this we cant get for example\n//   handleChange(event) {\n//     this.setState(state => ({value: event.target.value}));\n//   }\n//   handleSubmit(event) {\n//     console.log(this.state.value);\n//     this.setState(state => ({value: FlavorForm.initial}));\n//     event.preventDefault()\n//   }\n//   render() {\n//     return(\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Pick your favorite flavor:\n//           <select value={this.state.value} onChange={this.handleChange}>\n//             <option value=\"grapefruit\">GrapeFruit</option>\n//             <option value=\"lime\">Lime</option>\n//             <option value=\"coconut\">Coconut</option>\n//             <option value=\"mango\">Mango</option>\n//           </select>\n//         </label>\n//         <input type='submit' value='Submit'/>\n//       </form>\n//     )\n//   }\n// }\n////end of example\n\n\n\n// class FlavorForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {value: 'coconut'};\n\n//     this.handleChange = this.handleChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n\n//   handleChange(event) {\n//     this.setState({value: event.target.value});\n//   }\n\n//   handleSubmit(event) {\n//     alert('Your favorite flavor is: ' + this.state.value);\n//     event.preventDefault();\n//   }\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <label>\n//           Pick your favorite flavor:\n//           <select value={this.state.value} onChange={this.handleChange}>\n//             <option value=\"grapefruit\">Grapefruit</option>\n//             <option value=\"lime\">Lime</option>\n//             <option value=\"coconut\">Coconut</option>\n//             <option value=\"mango\">Mango</option>\n//           </select>\n//         </label>\n//         <input type=\"submit\" value=\"Submit\" />\n//       </form>\n//     );\n//   }\n// }\n\n//handling multyple inputs example\n// class Reservation extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       isGoing: true,\n//       numberOfGuests: 2,\n//     }\n//     this.handleInputChange = this.handleInputChange.bind(this);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//   }\n//   handleInputChange(event) {\n//       const target = event.target;\n//       const value = target.type === 'checkbox' ? target.checked : target.value;\n//       const name = target.name;\n\n//       this.setState({\n//         [name]: value,\n//       })\n//   }\n//   handleSubmit(event) {\n//     console.log(`{isGoing: ${this.state.isGoing}, numberOfGuests: ${this.state.numberOfGuests}}`);\n//     event.preventDefault()\n//   }\n//   render() {\n//     return(\n//       <form onSubmit={this.handleSubmit} >\n//         {/* onchange should be on inputs seperately not only on the form itself */}\n\n//         <label>\n//           Is going:\n//           <input\n//           name=\"isGoing\"\n//           type=\"checkbox\"\n//           checked={this.state.isGoing}\n//           onChange={this.handleInputChange}/>\n//         </label>\n\n//         <br/>\n\n//         <label>\n//           Number of guests:\n//           <input\n//           name=\"numberOfGuests\"\n//           type=\"number\"\n//           value={this.state.numberOfGuests}\n//           onChange={this.handleInputChange} />\n//         </label>\n//         <input type='submit' value='Submit'/>\n\n//       </form>\n//     )\n//   }\n// }\n////end of example\n\n// let input = <input value=\"hi\"/> //non editabel example\n// let input = <input value={null}/>// editable example\n\n                    //Lifting state up\n\n//start of example with boiling water\n// function BoilingVerdict(props) {\n//   return props.celcius >= 100\n//   ? <p>The water would boil</p>\n//   : <p>The water would not boil</p>\n// }\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {temperature: ''}\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   handleChange(e) {\n//     this.setState({temperature: e.target.value});\n//   }\n\n//   render() {\n//     const temperature = this.state.temperature;\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in celcius</legend>\n//         <input value={temperature}\n//         onChange={this.handleChange}/>\n//         <BoilingVerdict celcius={temperature}/>\n//       </fieldset>\n//     )\n//   }\n// }\n//end of example\n\n//// start Adding a second input as for farenheit work sync.\n// const scaleNames = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// }\n\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleChange = this.handleChange.bind(this);\n//     this.state = {temperature: ''}\n//   }\n\n//   handleChange(e) {\n//     this.setState({temperature: e.target.value})\n//   }\n//   render() {\n//     const temperature = this.state.temperature;\n//     const scale = this.props.scale;\n//     return (\n//       <fieldset>\n//         <legend>Enter a temperature in {scaleNames[scale]}</legend>\n//         <input\n//         onChange={this.handleChange}\n//         value={temperature} />\n//       </fieldset>\n//     )\n//   }\n// }\n// //// need to change calculateor to render two seperate temperature inputs\n// class Calculator extends React.Component {\n//   render() {\n//     return(\n//       <div>\n//         <TemperatureInput scale='c'/>\n//         <TemperatureInput scale='f'/>\n//       </div>\n//     )\n//   }\n// }\n// //conversion functions\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n\n// function tryConvert(temperature, convert) {\n//   const input = parseFloat(temperature);\n//   if(Number.isNaN(input)) {\n//     return ''\n//   }\n//   const output = convert(input);\n//   const rounded = Math.round(outpoot * 1000) / 1000;\n//   return rounded.toString();\n// }\n// end of not finished example\n\n\n//finish example of Lifting up state\n// const scaleNames = {\n//   c: 'Celsius',\n//   f: 'Fahrenheit'\n// };\n\n// function toCelsius(fahrenheit) {\n//   return (fahrenheit - 32) * 5 / 9;\n// }\n\n// function toFahrenheit(celsius) {\n//   return (celsius * 9 / 5) + 32;\n// }\n\n// function tryConvert(temperature, convert) {\n//   const input = parseFloat(temperature);\n//   if (Number.isNaN(input)) {\n//     return '';\n//   }\n//   const output = convert(input);\n//   const rounded = Math.round(output * 1000) / 1000;\n//   return rounded.toString();\n// }\n\n// function BoilingVerdict(props) {\n//   if (props.celsius >= 100) {\n//     return <p>The water would boil.</p>;\n//   }\n//   return <p>The water would not boil.</p>;\n// }\n\n// class TemperatureInput extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n\n//   handleChange(e) {\n//     this.props.onTemperatureChange(e.target.value);\n//   }\n\n//   render() {\n//     const temperature = this.props.temperature;\n//     const scale = this.props.scale;\n//     return (\n//       <fieldset>\n//         <legend>Enter temperature in {scaleNames[scale]}:</legend>\n//         <input value={temperature}\n//                onChange={this.handleChange} />\n//       </fieldset>\n//     );\n//   }\n// }\n\n// class Calculator extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n//     this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n//     this.state = {temperature: '', scale: 'c'};\n//   }\n\n//   handleCelsiusChange(temperature) {\n//     this.setState({scale: 'c', temperature});\n//   }\n\n//   handleFahrenheitChange(temperature) {\n//     this.setState({scale: 'f', temperature});\n//   }\n\n//   render() {\n//     const scale = this.state.scale;\n//     const temperature = this.state.temperature;\n//     const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n//     const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n//     return (\n//       <div>\n//         <TemperatureInput\n//           scale=\"c\"\n//           temperature={celsius}\n//           onTemperatureChange={this.handleCelsiusChange} />\n//         <TemperatureInput\n//           scale=\"f\"\n//           temperature={fahrenheit}\n//           onTemperatureChange={this.handleFahrenheitChange} />\n//         <BoilingVerdict\n//           celsius={parseFloat(celsius)} />\n//       </div>\n//     );\n//   }\n// }\n//end of fucking big example\n\n//not homework it is up to you create two inputs dollar dram wich will work sync\n\n\n                    //Composition vs inheritance\n\n//example of children include css 1-15\n// function FancyBorder(props) {\n//   return(\n//     <div className={'FancyBorder FancyBorder-' + props.color}>\n//       {props.children}\n//     </div>\n//   )\n// }\n// function WelcomeDialog(props) {\n//   return (\n//     <FancyBorder color='blue'>\n//       <h1 className='Dialog-title'>Welcome</h1>\n//       <p className=\"Dialog-message\">Thank you for visiting our spacecraft!</p>\n//     </FancyBorder>\n//   )\n// }\n//end of example\n//own convention instead of using children\n\n//specilization\n// function FancyBorder(props) {\n//   return (\n//     <div className={'FancyBorder FancyBorder-' + props.color}>\n//       {props.children}\n//     </div>\n//   );\n// }\n\n// function Dialog(props) {\n//   return (\n//     <FancyBorder color=\"blue\">\n//       <h1 className=\"Dialog-title\">\n//         {props.title}\n//       </h1>\n//       <p className=\"Dialog-message\">\n//         {props.message}\n//       </p>\n//     </FancyBorder>\n//   );\n// }\n\n// function WelcomeDialog() {\n//   return (\n//     <Dialog\n//       title=\"Welcome\"\n//       message=\"Thank you for visiting our spacecraft!\" />\n//   );\n//   }\n//   // includes cs end of example 19-37\n\n  //composition works also with class components start of example includes css 39-56\n  //\n  // function FancyBorder(props) {\n  //   return (\n  //     <div className={'FancyBorder FancyBorder-' + props.color}>\n  //       {props.children}\n  //     </div>\n  //   );\n  // }\n\n  // function Dialog(props) {\n  //   return (\n  //     <FancyBorder color=\"blue\">\n  //       <h1 className=\"Dialog-title\">\n  //         {props.title}\n  //       </h1>\n  //       <p className=\"Dialog-message\">\n  //         {props.message}\n  //       </p>\n  //       {props.children}\n  //     </FancyBorder>\n  //   );\n  // }\n\n  // class SignUpDialog extends React.Component {\n  //   constructor(props) {\n  //     super(props);\n  //     this.handleChange = this.handleChange.bind(this);\n  //     this.handleSignUp = this.handleSignUp.bind(this);\n  //     this.state = {login: ''};\n  //   }\n\n  //   render() {\n  //     return (\n  //       <Dialog title=\"Mars Exploration Program\"\n  //               message=\"How should we refer to you?\">\n  //         <input value={this.state.login}\n  //                onChange={this.handleChange} />\n  //         <button onClick={this.handleSignUp}>\n  //           Sign Me Up!\n  //         </button>\n  //       </Dialog>\n  //     );\n  //   }\n\n  //   handleChange(e) {\n  //     this.setState({login: e.target.value});\n  //   }\n\n  //   handleSignUp() {\n  //     alert(`Welcome aboard, ${this.state.login}!`);\n  //   }\n  // }\n\n  // end of example\n\n //start of thinking in react example includes css 59\n//  class ProductCategoryRow extends React.Component {\n//   render() {\n//     const category = this.props.category;\n//     return (\n//       <tr>\n//         <th colSpan=\"2\">\n//           {category}\n//         </th>\n//       </tr>\n//     );\n//   }\n// }\n\n// class ProductRow extends React.Component {\n//   render() {\n//     const product = this.props.product;\n//     const name = product.stocked ?\n//       product.name :\n//       <span style={{color: 'red'}}>\n//         {product.name}\n//       </span>;\n\n//     return (\n//       <tr>\n//         <td>{name}</td>\n//         <td>{product.price}</td>\n//       </tr>\n//     );\n//   }\n// }\n\n// class ProductTable extends React.Component {\n//   render() {\n//     const filterText = this.props.filterText;\n//     const inStockOnly = this.props.inStockOnly;\n\n//     const rows = [];\n//     let lastCategory = null;\n\n//     this.props.products.forEach((product) => {\n//       if (product.name.indexOf(filterText) === -1) {\n//         return;\n//       }\n//       if (inStockOnly && !product.stocked) {\n//         return;\n//       }\n//       if (product.category !== lastCategory) {\n//         rows.push(\n//           <ProductCategoryRow\n//             category={product.category}\n//             key={product.category} />\n//         );\n//       }\n//       rows.push(\n//         <ProductRow\n//           product={product}\n//           key={product.name}\n//         />\n//       );\n//       lastCategory = product.category;\n//     });\n\n//     return (\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Price</th>\n//           </tr>\n//         </thead>\n//         <tbody>{rows}</tbody>\n//       </table>\n//     );\n//   }\n// }\n\n// class SearchBar extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n//     this.handleInStockChange = this.handleInStockChange.bind(this);\n//   }\n\n//   handleFilterTextChange(e) {\n//     this.props.onFilterTextChange(e.target.value);\n//   }\n\n//   handleInStockChange(e) {\n//     this.props.onInStockChange(e.target.checked);\n//   }\n\n//   render() {\n//     return (\n//       <form>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search...\"\n//           value={this.props.filterText}\n//           onChange={this.handleFilterTextChange}\n//         />\n//         <p>\n//           <input\n//             type=\"checkbox\"\n//             checked={this.props.inStockOnly}\n//             onChange={this.handleInStockChange}\n//           />\n//           {' '}\n//           Only show products in stock\n//         </p>\n//       </form>\n//     );\n//   }\n// }\n\n// class FilterableProductTable extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       filterText: '',\n//       inStockOnly: false\n//     };\n\n//     this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n//     this.handleInStockChange = this.handleInStockChange.bind(this);\n//   }\n\n//   handleFilterTextChange(filterText) {\n//     this.setState({\n//       filterText: filterText\n//     });\n//   }\n\n//   handleInStockChange(inStockOnly) {\n//     this.setState({\n//       inStockOnly: inStockOnly\n//     })\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <SearchBar\n//           filterText={this.state.filterText}\n//           inStockOnly={this.state.inStockOnly}\n//           onFilterTextChange={this.handleFilterTextChange}\n//           onInStockChange={this.handleInStockChange}\n//         />\n//         <ProductTable\n//           products={this.props.products}\n//           filterText={this.state.filterText}\n//           inStockOnly={this.state.inStockOnly}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n\n// const PRODUCTS = [\n//   {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n//   {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n//   {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n//   {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n//   {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n//   {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n// ];\n //end of example\n\n                          //HOOKS\n//example of hooks\n// import React, { useState } from 'react';\n\n// function Example() {\n//   // Declare a new state variable, which we'll call \"count\"\n//   const [count, setCount] = useState(0);\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n\n// function FirstHook(props) {\n//   let [name, setName] = useState('Ando');\n//   let [surname, setSurname] = useState('Tsaturyan');\n//   function handleNameChange(e) {\n//     name = e.target.value;\n//   }\n//   function handleSurnameChange(e) {\n//     setName(e.target.value);\n//   }\n//   function handleSurnameChange(e) {\n//     setSurname(e.target.value);\n//   }\n//   return(\n//     <div>\n//       <input\n//       value={name}\n//       onChange={handleNameChange}\n//       />\n//       <input\n//       value={surname}\n//       onChange={handleSurnameChange}\n//       />\n//     </div>\n//   )\n// }\n\n// Arturs burger example\n// class Burger extends React.Component {\n//   constructor(props) {\n//       super(props)\n//       this.burger = this.burger.bind(this)\n//       this.state = { classList: ['', '', ''], burgerOpen: false }\n//   }\n//   burger(e) {\n//       e.preventDefault()\n//       if (!this.state.burgerOpen) {\n//           this.setState((state) => ({\n//               classList: (state.classList = ['first', 'second', 'third']),\n//               burgerOpen: !state.burgerOpen,\n//           }))\n//       } else {\n//           this.setState((state) => ({\n//               classList: (state.classList = ['', '', '']),\n//               burgerOpen: !state.burgerOpen,\n//           }))\n//       }\n\n//       console.log(this.state)\n//   }\n//   render() {\n//       return (\n//           <div className=\"main_burger\">\n//               <div onClick={this.burger} className=\"main_burger_btn\">\n//                   <div className={this.state.classList[0]}></div>\n//                   <div className={this.state.classList[1]}></div>\n//                   <div className={this.state.classList[2]}></div>\n//               </div>\n//           </div>\n//       )\n//   }\n// }\n\n//step by step redux creating to do list\n\n//\nfunction App(props) {\n    const [name, setName] = useState('Armen');\n    const [letter, setLetter] = useState(null);\n    useEffect(() => {\n        if(!letter) {\n            console.log('chka')\n        } else {\n            setLetter('barev ka');\n        }\n        console.log('barev ka ')\n\n    }, [name]);\n    return (\n        <div>\n            <h1>{name}</h1>\n            <button onClick={() => setName(name + 'b')}>click me</button>\n        </div>\n    )\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}