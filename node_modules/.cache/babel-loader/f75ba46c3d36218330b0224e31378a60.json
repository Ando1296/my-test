{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './hook.css'; //declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n//You can use the State Hook more than once in a single component: end\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n//unsubscribing\n\nfunction FriendStatus(props) {\n  _s();\n\n  const [isOnline, setIsOnline] = useState(null);\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n    console.log(status);\n  }\n\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n\n  return isOnline ? 'Online' : 'Offline';\n} //unsubscribing end\n\n\n_s(FriendStatus, \"HLSnnfJYDaeB5hXQTNbVZdmJwXQ=\");\n\n_c = FriendStatus;\nexport default function Hook() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Hook;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FriendStatus\");\n$RefreshReg$(_c2, \"Hook\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js"],"names":["React","useEffect","useState","FriendStatus","props","isOnline","setIsOnline","handleStatusChange","status","console","log","ChatAPI","subscribeToFriendStatus","friend","id","unsubscribeFromFriendStatus","Hook"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,IAAD,CAAxC;;AAEA,WAASK,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCF,IAAAA,WAAW,CAACE,MAAM,CAACH,QAAR,CAAX;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD;;AAEDP,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,uBAAR,CAAgCR,KAAK,CAACS,MAAN,CAAaC,EAA7C,EAAiDP,kBAAjD;AACA,WAAO,MAAM;AACXI,MAAAA,OAAO,CAACI,2BAAR,CAAoCX,KAAK,CAACS,MAAN,CAAaC,EAAjD,EAAqDP,kBAArD;AACD,KAFD;AAGD,GALQ,CAAT;;AAOA,MAAIF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,WAAO,YAAP;AACD;;AACD,SAAOA,QAAQ,GAAG,QAAH,GAAc,SAA7B;AACD,C,CACH;;;GApBSF,Y;;KAAAA,Y;AAqBT,eAAe,SAASa,IAAT,GAAgB;AAC3B,sBACI;AAAA,2BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;MANuBA,I","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './hook.css'\n\n//declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n  //You can use the State Hook more than once in a single component: end\n\n\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n\n//unsubscribing\nfunction FriendStatus(props) {\n    const [isOnline, setIsOnline] = useState(null);\n\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n      console.log(status);\n    }\n\n    useEffect(() => {\n      ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n      return () => {\n        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n      };\n    });\n\n    if (isOnline === null) {\n      return 'Loading...';\n    }\n    return isOnline ? 'Online' : 'Offline';\n  }\n//unsubscribing end\nexport default function Hook() {\n    return(\n        <div>\n            <Example/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}