{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js\";\nimport React, { useEffect, useState } from 'react';\nimport './hook.css'; //declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n//You can use the State Hook more than once in a single component: end\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n//useEffect\n// function Example() {\n//   const [count, setCount] = useState(0);\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n//useEffect Hook\n//example using classes\n// class FriendStatus extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOnline: null };\n//       this.handleStatusChange = this.handleStatusChange.bind(this);\n//     }\n//     componentDidMount() {\n//       ChatAPI.subscribeToFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     componentWillUnmount() {\n//       ChatAPI.unsubscribeFromFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     handleStatusChange(status) {\n//       this.setState({\n//         isOnline: status.isOnline\n//       });\n//     }\n//     render() {\n//       if (this.state.isOnline === null) {\n//         return 'Loading...';\n//       }\n//       return this.state.isOnline ? 'Online' : 'Offline';\n//     }\n//   }\n//example using classes **\n//example using functions\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     useEffect(() => {\n//       function handleStatusChange(status) {\n//         setIsOnline(status.isOnline);\n//       }\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       // Specify how to clean up after this effect:\n//       return function cleanup() {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//example using functions**\n//hook1\n// useEffect(() => {\n//     document.title = `You clicked ${count} times`;\n//   }, [count]); // Only re-run the effect if count changes\n//hook1 ****\n// !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n//useEffect Hook****\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n//custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n//Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n// start\n// class BlurExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOpen: false };\n//       this.timeOutId = null;\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onBlurHandler = this.onBlurHandler.bind(this);\n//       this.onFocusHandler = this.onFocusHandler.bind(this);\n//     }\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n//     // We close the popover on the next tick by using setTimeout.\n//     // This is necessary because we need to first check if\n//     // another child of the element has received focus as\n//     // the blur event fires prior to the new focus event.\n//     onBlurHandler() {\n//       this.timeOutId = setTimeout(() => {\n//         this.setState({\n//           isOpen: false\n//         });\n//       });\n//     }\n//     // If a child receives focus, do not close the popover.\n//     onFocusHandler() {\n//       clearTimeout(this.timeOutId);\n//     }\n//     render() {\n//       // React assists us by bubbling the blur and\n//       // focus events to the parent.\n//       return (\n//         <div onBlur={this.onBlurHandler}\n//              onFocus={this.onFocusHandler}>\n//           <button onClick={this.onClickHandler}\n//                   aria-haspopup=\"true\"\n//                   aria-expanded={this.state.isOpen}>\n//             Select an option\n//           </button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n//** end  example of onblur and onfocus\n//React.createContext(defaultValue)\n//// declare a my context variable with default value\n// const myContext = React.createContext(15);\n////Context.Provider\n//// Context object comes with Provider Component that allows componentsto suscribe to context changes.\n// const myContext = React.createContext('15');\n// let result = <myContext.Provider value={16}>\n//     <h1>barev</h1>\n//     <myContext.Consumer>\n//         {value => {\n//             return (\n//                 <h2>{value + 1}</h2>\n//             )\n//         }}\n//     </myContext.Consumer>\n// </myContext.Provider>\n//complex example ov context\n// const themes = {\n//     light: {\n//       foreground: '#000000',\n//       background: '#eeeeee',\n//     },\n//     dark: {\n//       foreground: '#ffffff',\n//       background: '#222222',\n//     },\n//   };\n//   const ThemeContext = React.createContext(\n//     themes.dark // default value\n//   );\n//   class ThemedButton extends React.Component {\n//     render() {\n//       let props = this.props;\n//       let theme = this.context;\n//       return (\n//         <button\n//           {...props}\n//           style={{backgroundColor: theme.background}}\n//         />\n//       );\n//     }\n//   }\n//   ThemedButton.contextType = ThemeContext;\n//   // An intermediate component that uses the ThemedButton\n// function Toolbar(props) {\n//     return (\n//       <ThemedButton onClick={props.changeTheme}>\n//         Change Theme\n//       </ThemedButton>\n//     );\n//   }\n//   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         theme: themes.light,\n//       };\n//       this.toggleTheme = () => {\n//         this.setState(state => ({\n//           theme:\n//             state.theme === themes.dark\n//               ? themes.light\n//               : themes.dark,\n//         }));\n//       };\n//     }\n//     render() {\n//       // The ThemedButton button inside the ThemeProvider\n//       // uses the theme from state while the one outside uses\n//       // the default dark theme\n//       return (\n//         <Page>\n//           <ThemeContext.Provider value={this.state.theme}>\n//             <Toolbar changeTheme={this.toggleTheme} />\n//           </ThemeContext.Provider>\n//           <Section>\n//             <ThemedButton />\n//           </Section>\n//         </Page>\n//       );\n//     }\n//   }\n//end complex example of context\n//error boundaries example\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      errorInfo: null\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    }); // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Something went wrong.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: [this.state.error && this.state.error.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 15\n          }, this), this.state.errorInfo.componentStack]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 11\n      }, this);\n    } // Normally, just render children\n\n\n    return this.props.children;\n  }\n\n}\n\nclass BuggyCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(({\n      counter\n    }) => ({\n      counter: counter + 1\n    }));\n  }\n\n  render() {\n    if (this.state.counter === 5) {\n      // Simulate a JS error\n      throw new Error('I crashed!');\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: this.handleClick,\n      children: this.state.counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"This is an example of error boundaries in React 16.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 19\n        }, this), \"Click on the numbers to increase the counters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this), \"The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BuggyCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BuggyCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n      children: /*#__PURE__*/_jsxDEV(BuggyCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 691,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n      children: /*#__PURE__*/_jsxDEV(BuggyCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 673,\n    columnNumber: 7\n  }, this);\n} //end error boundaries example\n\n\n_c = App;\nexport default function Hook() {\n  return /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 700,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Hook;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Hook\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js"],"names":["React","useEffect","useState","ErrorBoundary","Component","constructor","props","state","error","errorInfo","componentDidCatch","setState","render","whiteSpace","toString","componentStack","children","BuggyCounter","counter","handleClick","bind","Error","App","Hook"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AAEZ;AAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEoB;AACpaAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAAb;AACD;;AAEDC,EAAAA,iBAAiB,CAACF,KAAD,EAAQC,SAAR,EAAmB;AAClC;AACA,SAAKE,QAAL,CAAc;AACZH,MAAAA,KAAK,EAAEA,KADK;AAEZC,MAAAA,SAAS,EAAEA;AAFC,KAAd,EAFkC,CAMlC;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKL,KAAL,CAAWE,SAAf,EAA0B;AACxB;AACA,0BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAS,UAAA,KAAK,EAAE;AAAEI,YAAAA,UAAU,EAAE;AAAd,WAAhB;AAAA,qBACG,KAAKN,KAAL,CAAWC,KAAX,IAAoB,KAAKD,KAAL,CAAWC,KAAX,CAAiBM,QAAjB,EADvB,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGG,KAAKP,KAAL,CAAWE,SAAX,CAAqBM,cAHxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAUD,KAbM,CAcP;;;AACA,WAAO,KAAKT,KAAL,CAAWU,QAAlB;AACD;;AA/ByC;;AAkC5C,MAAMC,YAAN,SAA2BjB,KAAK,CAACI,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEW,MAAAA,OAAO,EAAE;AAAX,KAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZ,SAAKR,QAAL,CAAc,CAAC;AAACO,MAAAA;AAAD,KAAD,MAAgB;AAC5BA,MAAAA,OAAO,EAAEA,OAAO,GAAG;AADS,KAAhB,CAAd;AAGD;;AAEDN,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKL,KAAL,CAAWW,OAAX,KAAuB,CAA3B,EAA8B;AAC5B;AACA,YAAM,IAAIG,KAAJ,CAAU,YAAV,CAAN;AACD;;AACD,wBAAO;AAAI,MAAA,OAAO,EAAE,KAAKF,WAAlB;AAAA,gBAAgC,KAAKZ,KAAL,CAAWW;AAA3C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAnBwC;;AAsB3C,SAASI,GAAT,GAAe;AACb,sBACE;AAAA,4BACE;AAAA,6BACE;AAAA,uFAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAEQ;AAAA;AAAA;AAAA;AAAA,gBAFR,iEAIE;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE,QAAC,aAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE,QAAC,aAAD;AAAA,6BAAe,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE,QAAC,aAAD;AAAA,6BAAe,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,C,CACD;;;KAzBSA,G;AA2BX,eAAe,SAASC,IAAT,GAAgB;AAC3B,sBACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;MAJuBA,I","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './hook.css'\n\n//declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n  //You can use the State Hook more than once in a single component: end\n\n\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n\n//useEffect\n\n// function Example() {\n//   const [count, setCount] = useState(0);\n\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n\n//useEffect Hook\n    //example using classes\n    // class FriendStatus extends React.Component {\n    //     constructor(props) {\n    //       super(props);\n    //       this.state = { isOnline: null };\n    //       this.handleStatusChange = this.handleStatusChange.bind(this);\n    //     }\n\n    //     componentDidMount() {\n    //       ChatAPI.subscribeToFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     componentWillUnmount() {\n    //       ChatAPI.unsubscribeFromFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     handleStatusChange(status) {\n    //       this.setState({\n    //         isOnline: status.isOnline\n    //       });\n    //     }\n\n    //     render() {\n    //       if (this.state.isOnline === null) {\n    //         return 'Loading...';\n    //       }\n    //       return this.state.isOnline ? 'Online' : 'Offline';\n    //     }\n    //   }\n    //example using classes **\n\n    //example using functions\n    // function FriendStatus(props) {\n    //     const [isOnline, setIsOnline] = useState(null);\n\n    //     useEffect(() => {\n    //       function handleStatusChange(status) {\n    //         setIsOnline(status.isOnline);\n    //       }\n    //       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    //       // Specify how to clean up after this effect:\n    //       return function cleanup() {\n    //         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    //       };\n    //     });\n\n    //     if (isOnline === null) {\n    //       return 'Loading...';\n    //     }\n    //     return isOnline ? 'Online' : 'Offline';\n    //   }\n    //example using functions**\n    //hook1\n    // useEffect(() => {\n    //     document.title = `You clicked ${count} times`;\n    //   }, [count]); // Only re-run the effect if count changes\n    //hook1 ****\n\n                // !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n\n    //useEffect Hook****\n\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n\n                    //custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n\n    //Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n\n    // start\n// class BlurExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n\n//       this.state = { isOpen: false };\n//       this.timeOutId = null;\n\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onBlurHandler = this.onBlurHandler.bind(this);\n//       this.onFocusHandler = this.onFocusHandler.bind(this);\n//     }\n\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n\n//     // We close the popover on the next tick by using setTimeout.\n//     // This is necessary because we need to first check if\n//     // another child of the element has received focus as\n//     // the blur event fires prior to the new focus event.\n//     onBlurHandler() {\n//       this.timeOutId = setTimeout(() => {\n//         this.setState({\n//           isOpen: false\n//         });\n//       });\n//     }\n\n//     // If a child receives focus, do not close the popover.\n//     onFocusHandler() {\n//       clearTimeout(this.timeOutId);\n//     }\n\n//     render() {\n//       // React assists us by bubbling the blur and\n//       // focus events to the parent.\n//       return (\n//         <div onBlur={this.onBlurHandler}\n//              onFocus={this.onFocusHandler}>\n//           <button onClick={this.onClickHandler}\n//                   aria-haspopup=\"true\"\n//                   aria-expanded={this.state.isOpen}>\n//             Select an option\n//           </button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n//** end  example of onblur and onfocus\n\n    //React.createContext(defaultValue)\n    //// declare a my context variable with default value\n// const myContext = React.createContext(15);\n    ////Context.Provider\n    //// Context object comes with Provider Component that allows componentsto suscribe to context changes.\n// const myContext = React.createContext('15');\n// let result = <myContext.Provider value={16}>\n//     <h1>barev</h1>\n//     <myContext.Consumer>\n//         {value => {\n//             return (\n//                 <h2>{value + 1}</h2>\n//             )\n//         }}\n//     </myContext.Consumer>\n// </myContext.Provider>\n\n//complex example ov context\n\n// const themes = {\n//     light: {\n//       foreground: '#000000',\n//       background: '#eeeeee',\n//     },\n//     dark: {\n//       foreground: '#ffffff',\n//       background: '#222222',\n//     },\n//   };\n//   const ThemeContext = React.createContext(\n//     themes.dark // default value\n//   );\n\n//   class ThemedButton extends React.Component {\n//     render() {\n//       let props = this.props;\n//       let theme = this.context;\n//       return (\n//         <button\n//           {...props}\n//           style={{backgroundColor: theme.background}}\n//         />\n//       );\n//     }\n//   }\n//   ThemedButton.contextType = ThemeContext;\n\n//   // An intermediate component that uses the ThemedButton\n// function Toolbar(props) {\n//     return (\n//       <ThemedButton onClick={props.changeTheme}>\n//         Change Theme\n//       </ThemedButton>\n//     );\n//   }\n\n//   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         theme: themes.light,\n//       };\n\n//       this.toggleTheme = () => {\n//         this.setState(state => ({\n//           theme:\n//             state.theme === themes.dark\n//               ? themes.light\n//               : themes.dark,\n//         }));\n//       };\n//     }\n\n//     render() {\n//       // The ThemedButton button inside the ThemeProvider\n//       // uses the theme from state while the one outside uses\n//       // the default dark theme\n//       return (\n//         <Page>\n//           <ThemeContext.Provider value={this.state.theme}>\n//             <Toolbar changeTheme={this.toggleTheme} />\n//           </ThemeContext.Provider>\n//           <Section>\n//             <ThemedButton />\n//           </Section>\n//         </Page>\n//       );\n//     }\n//   }\n\n  //end complex example of context\n\n  //error boundaries example\n  class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { error: null, errorInfo: null };\n    }\n\n    componentDidCatch(error, errorInfo) {\n      // Catch errors in any components below and re-render with error message\n      this.setState({\n        error: error,\n        errorInfo: errorInfo\n      })\n      // You can also log error messages to an error reporting service here\n    }\n\n    render() {\n      if (this.state.errorInfo) {\n        // Error path\n        return (\n          <div>\n            <h2>Something went wrong.</h2>\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              {this.state.error && this.state.error.toString()}\n              <br />\n              {this.state.errorInfo.componentStack}\n            </details>\n          </div>\n        );\n      }\n      // Normally, just render children\n      return this.props.children;\n    }\n  }\n\n  class BuggyCounter extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { counter: 0 };\n      this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n      this.setState(({counter}) => ({\n        counter: counter + 1\n      }));\n    }\n\n    render() {\n      if (this.state.counter === 5) {\n        // Simulate a JS error\n        throw new Error('I crashed!');\n      }\n      return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n    }\n  }\n\n  function App() {\n    return (\n      <div>\n        <p>\n          <b>\n            This is an example of error boundaries in React 16.\n            <br /><br />\n            Click on the numbers to increase the counters.\n            <br />\n            The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n          </b>\n        </p>\n        <hr />\n        <ErrorBoundary>\n          <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n          <BuggyCounter />\n          <BuggyCounter />\n        </ErrorBoundary>\n        <hr />\n        <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n        <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n        <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n      </div>\n    );\n  }\n  //end error boundaries example\n\nexport default function Hook() {\n    return(\n        <App />\n    )\n}"]},"metadata":{},"sourceType":"module"}