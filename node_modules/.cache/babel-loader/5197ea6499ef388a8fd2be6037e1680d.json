{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js\";\nimport React, { useEffect, useState } from 'react';\nimport './hook.css'; //declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n//You can use the State Hook more than once in a single component: end\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n//useEffect\n// function Example() {\n//   const [count, setCount] = useState(0);\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n//useEffect Hook\n//example using classes\n// class FriendStatus extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOnline: null };\n//       this.handleStatusChange = this.handleStatusChange.bind(this);\n//     }\n//     componentDidMount() {\n//       ChatAPI.subscribeToFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     componentWillUnmount() {\n//       ChatAPI.unsubscribeFromFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     handleStatusChange(status) {\n//       this.setState({\n//         isOnline: status.isOnline\n//       });\n//     }\n//     render() {\n//       if (this.state.isOnline === null) {\n//         return 'Loading...';\n//       }\n//       return this.state.isOnline ? 'Online' : 'Offline';\n//     }\n//   }\n//example using classes **\n//example using functions\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     useEffect(() => {\n//       function handleStatusChange(status) {\n//         setIsOnline(status.isOnline);\n//       }\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       // Specify how to clean up after this effect:\n//       return function cleanup() {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//example using functions**\n//hook1\n// useEffect(() => {\n//     document.title = `You clicked ${count} times`;\n//   }, [count]); // Only re-run the effect if count changes\n//hook1 ****\n// !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n//useEffect Hook****\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n//custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n//Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n// start\n\nclass BlurExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.timeOutId = null;\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.onBlurHandler = this.onBlurHandler.bind(this);\n    this.onFocusHandler = this.onFocusHandler.bind(this);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isOpen: !currentState.isOpen\n    }));\n  } // We close the popover on the next tick by using setTimeout.\n  // This is necessary because we need to first check if\n  // another child of the element has received focus as\n  // the blur event fires prior to the new focus event.\n\n\n  onBlurHandler() {\n    this.timeOutId = setTimeout(() => {\n      this.setState({\n        isOpen: false\n      });\n    });\n  } // If a child receives focus, do not close the popover.\n\n\n  onFocusHandler() {\n    clearTimeout(this.timeOutId);\n  }\n\n  render() {\n    // React assists us by bubbling the blur and\n    // focus events to the parent.\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: this.onBlurHandler,\n      onFocus: this.onFocusHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onClickHandler,\n        \"aria-haspopup\": \"true\",\n        \"aria-expanded\": this.state.isOpen,\n        children: \"Select an option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this), this.state.isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Option 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Option 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Option 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 9\n    }, this);\n  }\n\n} //** end  example of onblur and onfocus\n\n\nexport default function Hook() {\n  return /*#__PURE__*/_jsxDEV(BlurExample, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 522,\n    columnNumber: 9\n  }, this);\n}\n_c = Hook;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hook\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js"],"names":["React","useEffect","useState","BlurExample","Component","constructor","props","state","isOpen","timeOutId","onClickHandler","bind","onBlurHandler","onFocusHandler","setState","currentState","setTimeout","clearTimeout","render","Hook"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AAEZ;AAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACJ;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBF,IAApB,CAAyB,IAAzB,CAAtB;AACD;;AAEDD,EAAAA,cAAc,GAAG;AACf,SAAKI,QAAL,CAAcC,YAAY,KAAK;AAC7BP,MAAAA,MAAM,EAAE,CAACO,YAAY,CAACP;AADO,KAAL,CAA1B;AAGD,GAhBqC,CAkBtC;AACA;AACA;AACA;;;AACAI,EAAAA,aAAa,GAAG;AACd,SAAKH,SAAL,GAAiBO,UAAU,CAAC,MAAM;AAChC,WAAKF,QAAL,CAAc;AACZN,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KAJ0B,CAA3B;AAKD,GA5BqC,CA8BtC;;;AACAK,EAAAA,cAAc,GAAG;AACfI,IAAAA,YAAY,CAAC,KAAKR,SAAN,CAAZ;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP;AACA;AACA,wBACE;AAAK,MAAA,MAAM,EAAE,KAAKN,aAAlB;AACK,MAAA,OAAO,EAAE,KAAKC,cADnB;AAAA,8BAEE;AAAQ,QAAA,OAAO,EAAE,KAAKH,cAAtB;AACQ,yBAAc,MADtB;AAEQ,yBAAe,KAAKH,KAAL,CAAWC,MAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAOG,KAAKD,KAAL,CAAWC,MAAX,iBACC;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAvDqC,C,CAyD1C;;;AACA,eAAe,SAASW,IAAT,GAAgB;AAC3B,sBACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;KAJuBA,I","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './hook.css'\n\n//declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n  //You can use the State Hook more than once in a single component: end\n\n\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n\n//useEffect\n\n// function Example() {\n//   const [count, setCount] = useState(0);\n\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n\n//useEffect Hook\n    //example using classes\n    // class FriendStatus extends React.Component {\n    //     constructor(props) {\n    //       super(props);\n    //       this.state = { isOnline: null };\n    //       this.handleStatusChange = this.handleStatusChange.bind(this);\n    //     }\n\n    //     componentDidMount() {\n    //       ChatAPI.subscribeToFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     componentWillUnmount() {\n    //       ChatAPI.unsubscribeFromFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     handleStatusChange(status) {\n    //       this.setState({\n    //         isOnline: status.isOnline\n    //       });\n    //     }\n\n    //     render() {\n    //       if (this.state.isOnline === null) {\n    //         return 'Loading...';\n    //       }\n    //       return this.state.isOnline ? 'Online' : 'Offline';\n    //     }\n    //   }\n    //example using classes **\n\n    //example using functions\n    // function FriendStatus(props) {\n    //     const [isOnline, setIsOnline] = useState(null);\n\n    //     useEffect(() => {\n    //       function handleStatusChange(status) {\n    //         setIsOnline(status.isOnline);\n    //       }\n    //       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    //       // Specify how to clean up after this effect:\n    //       return function cleanup() {\n    //         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    //       };\n    //     });\n\n    //     if (isOnline === null) {\n    //       return 'Loading...';\n    //     }\n    //     return isOnline ? 'Online' : 'Offline';\n    //   }\n    //example using functions**\n    //hook1\n    // useEffect(() => {\n    //     document.title = `You clicked ${count} times`;\n    //   }, [count]); // Only re-run the effect if count changes\n    //hook1 ****\n\n                // !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n\n    //useEffect Hook****\n\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n\n                    //custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n\n    //Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n// start\nclass BlurExample extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = { isOpen: false };\n      this.timeOutId = null;\n\n      this.onClickHandler = this.onClickHandler.bind(this);\n      this.onBlurHandler = this.onBlurHandler.bind(this);\n      this.onFocusHandler = this.onFocusHandler.bind(this);\n    }\n\n    onClickHandler() {\n      this.setState(currentState => ({\n        isOpen: !currentState.isOpen\n      }));\n    }\n\n    // We close the popover on the next tick by using setTimeout.\n    // This is necessary because we need to first check if\n    // another child of the element has received focus as\n    // the blur event fires prior to the new focus event.\n    onBlurHandler() {\n      this.timeOutId = setTimeout(() => {\n        this.setState({\n          isOpen: false\n        });\n      });\n    }\n\n    // If a child receives focus, do not close the popover.\n    onFocusHandler() {\n      clearTimeout(this.timeOutId);\n    }\n\n    render() {\n      // React assists us by bubbling the blur and\n      // focus events to the parent.\n      return (\n        <div onBlur={this.onBlurHandler}\n             onFocus={this.onFocusHandler}>\n          <button onClick={this.onClickHandler}\n                  aria-haspopup=\"true\"\n                  aria-expanded={this.state.isOpen}>\n            Select an option\n          </button>\n          {this.state.isOpen && (\n            <ul>\n              <li>Option 1</li>\n              <li>Option 2</li>\n              <li>Option 3</li>\n            </ul>\n          )}\n        </div>\n      );\n    }\n  }\n//** end  example of onblur and onfocus\nexport default function Hook() {\n    return(\n        <BlurExample/>\n    )\n}"]},"metadata":{},"sourceType":"module"}