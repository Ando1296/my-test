{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, PureComponent, useCallback, useContext, useState} from 'react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Child from './Child';\nimport Router from '../Router/router.js';\nimport './hook.css';\nimport { type } from 'jquery'; //declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n//You can use the State Hook more than once in a single component: end\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n//useEffect\n// function Example() {\n//   const [count, setCount] = useState(0);\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n//useEffect Hook\n//example using classes\n// class FriendStatus extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOnline: null };\n//       this.handleStatusChange = this.handleStatusChange.bind(this);\n//     }\n//     componentDidMount() {\n//       ChatAPI.subscribeToFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     componentWillUnmount() {\n//       ChatAPI.unsubscribeFromFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     handleStatusChange(status) {\n//       this.setState({\n//         isOnline: status.isOnline\n//       });\n//     }\n//     render() {\n//       if (this.state.isOnline === null) {\n//         return 'Loading...';\n//       }\n//       return this.state.isOnline ? 'Online' : 'Offline';\n//     }\n//   }\n//example using classes **\n//example using functions\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     useEffect(() => {\n//       function handleStatusChange(status) {\n//         setIsOnline(status.isOnline);\n//       }\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       // Specify how to clean up after this effect:\n//       return function cleanup() {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//example using functions**\n//hook1\n// useEffect(() => {\n//     document.title = `You clicked ${count} times`;\n//   }, [count]); // Only re-run the effect if count changes\n//hook1 ****\n// !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n//useEffect Hook****\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n//custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n//Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n// start\n// class BlurExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOpen: false };\n//       this.timeOutId = null;\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onBlurHandler = this.onBlurHandler.bind(this);\n//       this.onFocusHandler = this.onFocusHandler.bind(this);\n//     }\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n//     // We close the popover on the next tick by using setTimeout.\n//     // This is necessary because we need to first check if\n//     // another child of the element has received focus as\n//     // the blur event fires prior to the new focus event.\n//     onBlurHandler() {\n//       this.timeOutId = setTimeout(() => {\n//         this.setState({\n//           isOpen: false\n//         });\n//       });\n//     }\n//     // If a child receives focus, do not close the popover.\n//     onFocusHandler() {\n//       clearTimeout(this.timeOutId);\n//     }\n//     render() {\n//       // React assists us by bubbling the blur and\n//       // focus events to the parent.\n//       return (\n//         <div onBlur={this.onBlurHandler}\n//              onFocus={this.onFocusHandler}>\n//           <button onClick={this.onClickHandler}\n//                   aria-haspopup=\"true\"\n//                   aria-expanded={this.state.isOpen}>\n//             Select an option\n//           </button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n//** end  example of onblur and onfocus\n//React.createContext(defaultValue)\n//// declare a my context variable with default value\n// const myContext = React.createContext(15);\n////Context.Provider\n//// Context object comes with Provider Component that allows componentsto suscribe to context changes.\n// const myContext = React.createContext('15');\n// let result = <myContext.Provider value={16}>\n//     <h1>barev</h1>\n//     <myContext.Consumer>\n//         {value => {\n//             return (\n//                 <h2>{value + 1}</h2>\n//             )\n//         }}\n//     </myContext.Consumer>\n// </myContext.Provider>\n//complex example ov context\n// const themes = {\n//     light: {\n//       foreground: '#000000',\n//       background: '#eeeeee',\n//     },\n//     dark: {\n//       foreground: '#ffffff',\n//       background: '#222222',\n//     },\n//   };\n//   const ThemeContext = React.createContext(\n//     themes.dark // default value\n//   );\n//   class ThemedButton extends React.Component {\n//     render() {\n//       let props = this.props;\n//       let theme = this.context;\n//       return (\n//         <button\n//           {...props}\n//           style={{backgroundColor: theme.background}}\n//         />\n//       );\n//     }\n//   }\n//   ThemedButton.contextType = ThemeContext;\n//   // An intermediate component that uses the ThemedButton\n// function Toolbar(props) {\n//     return (\n//       <ThemedButton onClick={props.changeTheme}>\n//         Change Theme\n//       </ThemedButton>\n//     );\n//   }\n//   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         theme: themes.light,\n//       };\n//       this.toggleTheme = () => {\n//         this.setState(state => ({\n//           theme:\n//             state.theme === themes.dark\n//               ? themes.light\n//               : themes.dark,\n//         }));\n//       };\n//     }\n//     render() {\n//       // The ThemedButton button inside the ThemeProvider\n//       // uses the theme from state while the one outside uses\n//       // the default dark theme\n//       return (\n//         <Page>\n//           <ThemeContext.Provider value={this.state.theme}>\n//             <Toolbar changeTheme={this.toggleTheme} />\n//           </ThemeContext.Provider>\n//           <Section>\n//             <ThemedButton />\n//           </Section>\n//         </Page>\n//       );\n//     }\n//   }\n//end complex example of context\n//error boundaries example\n//   class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { error: null, errorInfo: null };\n//     }\n//     componentDidCatch(error, errorInfo) {\n//       // Catch errors in any components below and re-render with error message\n//       this.setState({\n//         error: error,\n//         errorInfo: errorInfo\n//       })\n//       // You can also log error messages to an error reporting service here\n//     }\n//     render() {\n//       if (this.state.errorInfo) {\n//         // Error path\n//         return (\n//           <div>\n//             <h2>Something went wrong.</h2>\n//             <details style={{ whiteSpace: 'pre-wrap' }}>\n//               {this.state.error && this.state.error.toString()}\n//               <br />\n//               {this.state.errorInfo.componentStack}\n//             </details>\n//           </div>\n//         );\n//       }\n//       // Normally, just render children\n//       return this.props.children;\n//     }\n//   }\n//   class BuggyCounter extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { counter: 0 };\n//       this.handleClick = this.handleClick.bind(this);\n//     }\n//     handleClick() {\n//       this.setState(({counter}) => ({\n//         counter: counter + 1\n//       }));\n//     }\n//     render() {\n//       if (this.state.counter === 5) {\n//         // Simulate a JS error\n//         throw new Error('I crashed!');\n//       }\n//       return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n//     }\n//   }\n//   function App() {\n//     return (\n//       <div>\n//         <p>\n//           <b>\n//             This is an example of error boundaries in React 16.\n//             <br /><br />\n//             Click on the numbers to increase the counters.\n//             <br />\n//             The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n//           </b>\n//         </p>\n//         <hr />\n//         <ErrorBoundary>\n//           <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n//           <BuggyCounter />\n//           <BuggyCounter />\n//         </ErrorBoundary>\n//         <hr />\n//         <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n//         <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n//         <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n//       </div>\n//     );\n//   }\n//end error boundaries example\n//   class ClickCounter extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {count: 0};\n//         this.incrementCount = this.incrementCount.bind(this)\n//     }\n//     incrementCount() {\n//         this.setState(prevState => {\n//             return {count: prevState.count + 1}\n//         })\n//     }\n//     render() {\n//         const count = this.state.count;\n//         return (\n//             <button onClick={this.incrementCount}>Clicked {count} times</button>\n//         )\n//     }\n//  }\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n// class OuterClickExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOpen: false };\n//       this.toggleContainer = React.createRef();\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onClickOutsideHandler = this.onClickOutsideHandler.bind(this);\n//     }\n//     componentDidMount() {\n//       window.addEventListener('click', this.onClickOutsideHandler);\n//     }\n//     componentWillUnmount() {\n//       window.removeEventListener('click', this.onClickOutsideHandler);\n//     }\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n//     onClickOutsideHandler(event) {\n//       if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n//         this.setState({ isOpen: false });\n//       }\n//     }\n//     render() {\n//       return (\n//         <div ref={this.toggleContainer}>\n//           <button onClick={this.onClickHandler}>Select an option</button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56, china: 34, Korea: 17}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n//example ov charts(grafik)\n//and also one thing need to import from react besides below\n// ('https://api.covid19api.com/summary', DATA);\n//homework covid-19\n// function SearchForm({setInputValue, inputValue}) {\n//   function handleInputChange(e) {\n//     setInputValue(e.target.value);\n//   }\n//   return (\n//     <input onChange={handleInputChange} value={inputValue} id='search-input'/>\n//   )\n// }\n// function CreateChart(props) {\n//   const [data, setData] = useState(null);\n//   const [filteredData, setFilteredData] = useState(null)\n//   const [inputValue, setInputValue] = useState('');\n//   //request\n//   useEffect(() => {\n//     fetch('https://api.covid19api.com/summary')\n//     .then(response => response.json())\n//     .then(resolvedData => {\n//       setData(resolvedData);\n//     });\n//   },[]);\n//   //lifeCycles\n//   // useEffect(() => {\n//   //   console.log(data?.Countries);\n//   // }, [data]);\n//   useEffect(() => {\n//     console.log(filteredData)\n//   },[filteredData])\n//   //handlers\n//   function handleClick(e) {\n//     if(!inputValue) {\n//       return\n//     }\n//     let capitalizedInput = inputValue[0].toUpperCase() + inputValue.slice(1,inputValue.length);\n//     let result = data.Countries.filter(countryInfo => countryInfo.Country.includes(capitalizedInput));\n//     setFilteredData(result);\n//   }\n//   return(\n//     <div>\n//       <div className=\"heading\">\n//       <SearchForm inputValue={inputValue} setInputValue={setInputValue}/>\n//       </div>\n//       <div className='button'>\n//         <button onClick={() => handleClick()}>Search</button>\n//       </div>\n//       <div className=\"footer\">\n//         <h1>Matching results</h1>\n//       </div>\n//     </div>\n//   )\n// }\n// function MatchingResaults(countryList) {\n//   let result = countryList.map(countryInfo => {\n//   })\n// }\n//end of covid-19\n// function InputExample(props) {\n//   return (\n//     <input value={props.value} onChange={() => props.handleInputChange}/>\n//   )\n// }\n// function containerInput(InputElement) {\n//   function Container(props) {\n//     const [value, setValue] = useState('');\n//     function handleInputChange(e) {\n//       setValue(e.target.value)\n//     }\n//     return (\n//       <InputElement value handleInputChange/>\n//     )\n//   }\n// }\n//example of useContext\n//  const themes = {\n//   light: {\n//     foreground: \"#000000\",\n//     background: \"#eeeeee\"\n//   },\n//   dark: {\n//     foreground: \"#ffffff\",\n//     background: \"#222222\"\n//   }\n// };\n// const ThemeContext = React.createContext(themes.light);\n// export default function App() {\n//   return (\n//     <ThemeContext.Provider value={themes.light}>\n//       <Toolbar />\n//     </ThemeContext.Provider>\n//   );\n// }\n// function Toolbar(props) {\n//   return (\n//     <div>\n//       <ThemedButton />\n//     </div>\n//   );\n// }\n// function ThemedButton() {\n//   const theme = useContext(ThemeContext);\n//   return (\n//     <button style={{ background: theme.background, color: theme.foreground }}>\n//       I am styled by theme context!\n//     </button>\n//   );\n// }\n// end of example of useContext\n//example of useReducer\n// const initialState = {count: 0};\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return {count: state.count + 1};\n//     case 'decrement':\n//       return {count: state.count - 1};\n//     default:\n//       throw new Error();\n//   }\n// }\n// export default function Counter() {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   return (\n//     <>\n//       Count: {state.count}\n//       <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n//       <button onClick={() => dispatch({type: 'increment'})}>+</button>\n//     </>\n//   );\n// }\n//end of example of useReducer\n//second example of useReducer with init function\n// function init(initialCount) {\n//   return {count: initialCount};\n// }\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return {count: state.count + 1};\n//     case 'decrement':\n//       return {count: state.count - 1};\n//     case 'reset':\n//       return init(action.payload);\n//     default:\n//       throw new Error();\n//   }\n// }\n// export default function Counter({initialCount}) {\n//   const [state, dispatch] = useReducer(reducer, 15, init);\n//   return (\n//     <>\n//       Count: {state.count}\n//       <button\n//         onClick={() => dispatch({type: 'reset', payload: 15})}>\n//         Reset\n//       </button>\n//       <button onClick={() => dispatch({type: 'decrement'})}>minus</button>\n//       <button onClick={() => dispatch({type: 'increment'})}>plus</button>\n//     </>\n//   );\n// }\n//end of example\n//example of memo and callback\n// export default function Hook() {\n//   const [localNumber, setLocalNumber] = useState(0);\n//   const [childNumber, setChildNumber] = useState(0);\n//   function incrementLocal() {\n//     setLocalNumber(state => state + 1);\n//   }\n//   function changeChildNumber(number) {\n//     setChildNumber(number);\n//   }\n//   const memoizedCallback = useCallback(number => changeChildNumber(number),[])\n//   return (\n//     <div>\n//       <Child number={childNumber} changeNumber={memoizedCallback}/>\n//       <br/>\n//       <button onClick={incrementLocal}>\n//         click to increment local\n//       </button>\n//       <h1>local: {localNumber}</h1>\n//     </div>\n//   )\n// }\n//end of example\n//useState with usereducer\n// const useStateReducer = (prevState, dispatch) => typeof dispatch === 'function' ? prevState : dispatch;\n// const useStateInitializer = initialArg => typeof initialArg === 'function' ? initialArg() : initialArg;\n// function useState(initialValue) {\n//   return React.useReducer(useStateReducer, initialValue, useStateInitializer);\n// }\n//  export default function Counter(props) {\n//   const [count, setCount] = useState(0);\n//   // const increment = () => setCount(count => count + 1);\n//   const increment = () => setCount((prevCount) => prevCount + 1);\n//   return (\n//     <div>\n//       <div>the current count is {count}</div>\n//       <button onClick={increment}>click me</button>\n//     </div>\n//   )\n// }\n//end of example\n//useState from useReducer\n// const useStateReducer = (prevState, newState) => {\n//   if(typeof newState === 'function') {\n//     return newState(prevState)\n//   } else {\n//     return newState;\n//   }\n// }\n// const useStateInitializer = initialValue => {\n//   return typeof initialValue === 'function' ? initialValue() : initialValue;\n// }\n//   function useState(initialValue) {\n//     return useReducer(useStateReducer, initialValue, useStateInitializer);\n//   }\n//  export default function App(props) {\n//    const [count, setCount] = useState(() => 10);\n//    function handlePlusClick() {\n//      setCount((prevCount) => prevCount + 1);\n//    }\n//    function handleMinusClick() {\n//      setCount(prevCount => prevCount - 1)\n//    }\n//    return (\n//      <>\n//      <h1>{count}</h1>\n//      <button onClick={handlePlusClick}>+</button>\n//      <br></br>\n//      <button onClick={handleMinusClick}>-</button>\n//      </>\n//    )\n//  }\n// //end of example\n//useReducer example\n// export default function App() {\n//   function reducer(state, action) {\n//     switch(action) {\n//       case 'increment': return state + 1;\n//       case 'decrement' : return state - 1;\n//       default :throw new Error('wtf is going on');\n//     }\n//   }\n//   function init() {\n//   }\n//   const [count, dispatch] = useReducer(reducer, 10);\n//   return (\n// <>\n//   <h1>{count}</h1>\n//   <button onClick={() => dispatch('decrement')}>minus</button>\n//   <button onClick={() => dispatch('increment')}>plus</button>\n// </>\n//   );\n// }\n//end of example\n//useReducer From useState start not finished yet\n// function useReducer(reducer, initalValue, init) {\n//   if(!init) {\n//     const [state, setState] = useState(init(initalValue));\n//   }else {\n//     const [state, setState] = useState(initailValue);\n//   }\n//   return ([state, reducer()])\n// }\n//end of example\n// function Some(props) {\n//   return (\n//     <button onClick={props.handleClick}></button>\n//   )\n// }\n// function hoc(WrappedComponent, selectData) {\n//   return (props) => {\n//     const [count, setCount] = useState(0);\n//     function handleClick() {\n//       setCount(count + 1);\n//       console.log('barev');\n//     }\n//   }\n//   return (<WrappedComponent handleClick={() => handleClick}/>)\n// }\n// export default hoc(Some)\n//useReducer from useState\n// function useReducer(reducer, initialValue, init) {\n//   const [state, setState] = useState(init ? init(initialValue) : initialValue);\n//   // if(!init) {\n//   //   const [state, setState] = useState(initialValue);\n//   // } else {\n//   //   const [state, setState] = useState(init(initialValue));\n//   // }\n//   function dispatch(value) {\n//     setState(reducer(state, value))\n//   }\n//   return [state, dispatch]\n// }\n// function reducer(state, value) {\n//   switch(value) {\n//     case 'Andranik': return 'Tsaturyan';\n//     case 'Hayk': return 'Poghosyan';\n//     case 'Arman': return 'Tsaturyan';\n//     case 'Hovsep': return 'Poghosyan';\n//   }\n// }\n// export default function App(props) {\n//   const [state, dispatch] = useReducer(reducer, 'Andranik');\n//   return (\n//     <div>\n//       <h1>{state}</h1>\n//       <button onClick={() => dispatch('Hayk')}>click</button>\n//     </div>\n//   )\n// }\n//end of example\n//following component tracks the mouse position in a web app\n// export default class MouseTracker extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n//         <h1>Move the mouse around!</h1>\n//         <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n//       </div>\n//     );\n//   }\n// }\n//end of example\n// The <Mouse> component encapsulates the behavior we need...\n// class Mouse extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n//         {/* ...but how do we render something other than a <p>? */}\n//         <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n//       </div>\n//     );\n//   }\n// }\n// export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <>\n//         <h1>Move the mouse around!</h1>\n//         <Mouse />\n//         <h1>barev</h1>\n//       </>\n//     );\n//   }\n// }\n//end of example\n//cat is moving with mouse\n// class Cat extends React.Component {\n//   render() {\n//     const mouse = this.props.mouse;\n//     return (\n//       <img src=\"https://www.google.com/url?sa=i&url=https%3A%2F%2Funsplash.com%2Fphotos%2FS9OCBwRFV_k&psig=AOvVaw2b7imO6aneaAqeYfG0t1GY&ust=1611231431852000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCNC-wvy-qu4CFQAAAAAdAAAAABAD\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n//     );\n//   }\n// }\n// class MouseWithCat extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n//         {/*\n//           We could just swap out the <p> for a <Cat> here ... but then\n//           we would need to create a separate <MouseWithSomethingElse>\n//           component every time we need to use it, so <MouseWithCat>\n//           isn't really reusable yet.\n//         */}\n//         <Cat mouse={this.state} />\n//       </div>\n//     );\n//   }\n// }\n//  export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Move the mouse around!</h1>\n//         <MouseWithCat />\n//       </div>\n//     );\n//   }\n// }\n//end of example\n//start of example\n// class Cat extends React.Component {\n//   render() {\n//     const mouse = this.props.mouse;\n//     return (\n//       <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n//     );\n//   }\n// }\n// class Mouse extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n//         {/*\n//           Instead of providing a static representation of what <Mouse> renders,\n//           use the `render` prop to dynamically determine what to render.\n//         */}\n//         {this.props.render(this.state)}\n//       </div>\n//     );\n//   }\n// }\n// export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Move the mouse around!</h1>\n//         <Mouse render={mouse => (\n//           <Cat mouse={mouse} />\n//         )}/>\n//       </div>\n//     );\n//   }\n// }\n//end of example\n// function reducer(state, value) {\n//   if(value == 'andranik') {\n//     return 'artur'\n//   } else if(value === 'artur') {\n//     return 'andranik'\n//   } else {\n//     return 'Mish'\n//   }\n// }\n// //example of useReducer\n// export default function App(props) {\n//   const [state, setState] = useState('andranik');\n//   const [name, dispatch] = useReducer(reducer, 'armen');\n//   useEffect(() => {\n//     dispatch('andranik');\n//   }, []);\n//   return (\n//     <h1>{name}</h1>\n//   )\n// }\n//end of example\n// class app extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {number: 15}\n//   }\n//   componentDidMount() {\n//     console.log('something');\n//   }\n//   componentWillUnmount() {\n//     console.log('heracav');\n//   }\n//   componentDidUpdate() {\n//     console.log('update');\n//   }\n// }\n// function App(props) {\n//   const [time, setTime] = useState(new Date().toLocaleTimeString());\n//   useEffect(() => {\n//     setInterval(() => {\n//       setTime(new Date().toLocaleTimeString());\n//     }, 1000)\n//   }, [])\n//   return (\n//     <h1>{time}</h1>\n//   )\n// }\n// export default App\n// export default function App(props) {\n//   const [count, setCount] = useState(0);\n//   let name = \"ÐºÐ°Ðº Ñ‚Ð²Ð¾Ð¸ Ð´ÐµÐ»Ð°\";\n//   return (\n//     <div>\n//       <h1>{name.slice(0,count)}</h1>\n//       <button onClick={() => {setCount(count + 1)}}>click me multiple times</button>\n//     </div>\n//   )\n// }\n//uncontrolled components example\n// export default function Uncotrolled() {\n//   let element = useRef(null);\n//   return (\n//     <div>\n//       <input ref={element}/>\n//       <button onClick={() => console.log(element.current.value)}>button</button>\n//     </div>\n//   )\n// }\n//end of example\n// export default function FirstHook() {\n//   const [count, setCount] = useState(0);\n//   return (\n//     <div>\n//       <h1>{count}</h1>\n//       <button onClick={() => setCount(count + 1)}>click me</button>\n//     </div>\n//   )\n// }\n\nexport default function App() {\n  _s();\n\n  const [name, setName] = useState(0);\n  const [date, setDate] = useState(new Date().toLocaleTimeString());\n  useEffect(() => {\n    let timer = setInterval(() => {\n      setDate(new Date().getTime());\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []); // useEffect(() => {}, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setName(name + 1),\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1458,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1457,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ja9Ae+nwH3DdZpIvXThEEJ6jtDM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js"],"names":["React","useState","useEffect","useRef","Child","Router","type","App","name","setName","date","setDate","Date","toLocaleTimeString","timer","setInterval","getTime","clearInterval"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,YAAP;AACA,SAASC,IAAT,QAAqB,QAArB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AAEZ;AAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEoB;AACpeAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,IAAIW,IAAJ,GAAWC,kBAAX,EAAD,CAAhC;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC5BJ,MAAAA,OAAO,CAAC,IAAIC,IAAJ,GAAWI,OAAX,EAAD,CAAP;AACD,KAFsB,EAErB,IAFqB,CAAvB;AAIA,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACH,KAAD,CAAb;AACD,KAFD;AAGD,GARQ,EAQP,EARO,CAAT,CAH4B,CAa5B;;AAEA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,MAAML,OAAO,CAACD,IAAI,GAAG,CAAR,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GArBuBH,G;;KAAAA,G","sourcesContent":["// import React, { useEffect, PureComponent, useCallback, useContext, useState} from 'react';\nimport React, {useState, useEffect, useRef} from 'react';\nimport Child from './Child';\nimport Router from '../Router/router.js'\nimport './hook.css'\nimport { type } from 'jquery';\n//declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n  //You can use the State Hook more than once in a single component: end\n\n\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n\n//useEffect\n\n// function Example() {\n//   const [count, setCount] = useState(0);\n\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n\n//useEffect Hook\n    //example using classes\n    // class FriendStatus extends React.Component {\n    //     constructor(props) {\n    //       super(props);\n    //       this.state = { isOnline: null };\n    //       this.handleStatusChange = this.handleStatusChange.bind(this);\n    //     }\n\n    //     componentDidMount() {\n    //       ChatAPI.subscribeToFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     componentWillUnmount() {\n    //       ChatAPI.unsubscribeFromFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     handleStatusChange(status) {\n    //       this.setState({\n    //         isOnline: status.isOnline\n    //       });\n    //     }\n\n    //     render() {\n    //       if (this.state.isOnline === null) {\n    //         return 'Loading...';\n    //       }\n    //       return this.state.isOnline ? 'Online' : 'Offline';\n    //     }\n    //   }\n    //example using classes **\n\n    //example using functions\n    // function FriendStatus(props) {\n    //     const [isOnline, setIsOnline] = useState(null);\n\n    //     useEffect(() => {\n    //       function handleStatusChange(status) {\n    //         setIsOnline(status.isOnline);\n    //       }\n    //       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    //       // Specify how to clean up after this effect:\n    //       return function cleanup() {\n    //         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    //       };\n    //     });\n\n    //     if (isOnline === null) {\n    //       return 'Loading...';\n    //     }\n    //     return isOnline ? 'Online' : 'Offline';\n    //   }\n    //example using functions**\n    //hook1\n    // useEffect(() => {\n    //     document.title = `You clicked ${count} times`;\n    //   }, [count]); // Only re-run the effect if count changes\n    //hook1 ****\n\n                // !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n\n    //useEffect Hook****\n\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n//arturs task\n\n// function App1(props) {\n//     const [click, setClick] = useState(0);\n//     const [time, setTime] = useState(5);\n//     const [result, setResult] = useState([]);\n\n//     function handleClick(e) {\n//         setClick(click => click + 1);\n//         setClick(click => click + 1);\n//     }\n//     function handleTryAgainClick() {\n//         setClick(0);\n//         setTime(5);\n//     }\n\n//     useEffect(() => {\n//         let id = setInterval(() => {\n//             setTime(time => time - 1)\n//         }, 1000);\n//         return () => clearInterval(id)\n//     },[]);\n\n//     return (\n//         <div>\n//             <h1>{time}</h1>\n//             <h1>{click}</h1>\n//             <button onClick={handleTryAgainClick}>try again</button>\n//             <button onClick={handleClick}>click me</button>\n//         </div>\n//     )\n\n// }\n//end of Arturs task\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         // this.resultClick = []\n//         this.state = { click: 0, time: 5, result:[] }\n//         this.clicking = this.clicking.bind(this)\n//         this.tryAgain = this.tryAgain.bind(this)\n//     }\n//     componentDidMount() {\n//         this.timeId = setInterval(() => {\n//             this.setState((state, props) => {\n//                 if (this.state.time > 0) {\n//                     return { time: state.time - 1 }\n//                 }\n//             })\n//         }, 1000)\n//     }\n//     componentWillUnmount() {\n\n//         clearInterval(this.timeId)\n//     }\n//     clicking() {\n//         if (this.state.time > 0) {\n//             this.setState((state, props) => ({ click: ++state.click }))\n//         }\n//     }\n//     tryAgain() {\n//         if (this.state.time === 0) {\n//             this.setState((state, props) => ({\n//                 time: (state.time = 5),\n//                 click: (state.click = 0),\n//             }))\n//         }\n//     }\n//     render() {\n//         return (\n//             <div className=\"App\">\n//                 <header className=\"App-header\">\n//                     <div className=\"congratulations_block\">\n//                         <p className=\"congratulations\">\n//                             {this.state.click >= 60 ? 'Congratulations' : ''}\n//                         </p>\n//                     </div>\n\n//                     <p>Goal - 60 click</p>\n//                     <h1> Time - {this.state.time}</h1>\n//                     <h2>Clicks - {this.state.click}</h2>\n//                     <button className=\"button_style\" onClick={this.clicking}>\n//                         Click me\n//                     </button>\n//                     <button className=\"button_style\" onClick={this.tryAgain}>\n//                         Try Again\n//                     </button>\n//                 </header>\n//             </div>\n//         )\n//     }\n// }\n\n// function App() {\n//     const [value, setValue] = useState(15);\n//     function handleChange(e) {\n//         setValue(e.target.value);\n//     }\n//     useEffect(() => {\n//         document.title = value;\n//     },[value]);\n//     return(\n//         <input value={value} onChange={handleChange}/>\n//     )\n// }\n\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {value: 1}\n//         this.handleChange = this.handleChange.bind(this);\n//     }\n//     handleChange(e) {\n//         this.setState({value: e.target.value})\n//     }\n//     render() {\n//         return (\n//             <input value={this.state.value} onChange={this.handleChange}/>\n//         )\n//     }\n// }\n// function App(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [number, setNumber] = useState(1);\n\n//     useEffect(() => {\n//         console.log(setNumber);\n//         return function () {\n//             console.log(15)\n//         }\n//     }, []);\n//     return (\n//         <div>\n//              <h1>{number}</h1>\n//         </div>\n//     )\n// }\n\n// setting function as a state\n// function App1(props) {\n//     setFirst('barev');\n//     return (\n//         <h1>something</h1>\n//     )\n// }\n\n                    //custom Hooks\n// function useCustomHook(number) {\n//     const [first, setFirst] = useState(number);\n//     return first\n// }\n// function UsingCustomHooks() {\n//     const first = useCustomHook(16);\n//     const second = useCustomHook(15);\n//     return (\n//         <div>{first}, {second}</div>\n//     )\n// }\n//end of first exmaple\n\n//second ex\n// function useCustomHook(initalValue) {\n//     const [value, setValue] = useState(initalValue);\n//     function setInitialState() {\n//         setValue(initalValue);\n//     }\n//     return [value, setValue, setInitialState];\n// }\n// function UsingCustomHooks(props) {\n//     const [value, setValue, setInitialValue] = useCustomHook(15);\n//     const [stateCounter, setStateCounter] = useCustomHook(0);\n//     let counter = 0;\n//     useEffect(() => {\n//         setTimeout(() => {\n//             setStateCounter(stateCounter + 1);\n//         },15000)\n//         let timerId = setInterval(() => {\n//             setValue(counter);\n//         },5000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [])\n//     return (\n//         <div>\n//             {stateCounter ? stateCounter : value}\n//         </div>\n//     )\n// }\n//second example ***\n\n//example\n// function Button({initialState}) {\n//     const [state, setState] = useState(initialState);\n//     return (\n//         <div>\n//             <h1>{state}</h1>\n//             <button onClick={() => setState(initialState)}>reset</button>\n//             <button onClick={() => setState(prevState => prevState - 1)}>-</button>\n//             <button onClick={() => setState(prevState => prevState + 1)}>+</button>\n//         </div>\n//     )\n// }\n//***\n\n    //Component change homework\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n////main Component change **\n\n    // start\n// class BlurExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n\n//       this.state = { isOpen: false };\n//       this.timeOutId = null;\n\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onBlurHandler = this.onBlurHandler.bind(this);\n//       this.onFocusHandler = this.onFocusHandler.bind(this);\n//     }\n\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n\n//     // We close the popover on the next tick by using setTimeout.\n//     // This is necessary because we need to first check if\n//     // another child of the element has received focus as\n//     // the blur event fires prior to the new focus event.\n//     onBlurHandler() {\n//       this.timeOutId = setTimeout(() => {\n//         this.setState({\n//           isOpen: false\n//         });\n//       });\n//     }\n\n//     // If a child receives focus, do not close the popover.\n//     onFocusHandler() {\n//       clearTimeout(this.timeOutId);\n//     }\n\n//     render() {\n//       // React assists us by bubbling the blur and\n//       // focus events to the parent.\n//       return (\n//         <div onBlur={this.onBlurHandler}\n//              onFocus={this.onFocusHandler}>\n//           <button onClick={this.onClickHandler}\n//                   aria-haspopup=\"true\"\n//                   aria-expanded={this.state.isOpen}>\n//             Select an option\n//           </button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n//** end  example of onblur and onfocus\n\n    //React.createContext(defaultValue)\n    //// declare a my context variable with default value\n// const myContext = React.createContext(15);\n    ////Context.Provider\n    //// Context object comes with Provider Component that allows componentsto suscribe to context changes.\n// const myContext = React.createContext('15');\n// let result = <myContext.Provider value={16}>\n//     <h1>barev</h1>\n//     <myContext.Consumer>\n//         {value => {\n//             return (\n//                 <h2>{value + 1}</h2>\n//             )\n//         }}\n//     </myContext.Consumer>\n// </myContext.Provider>\n\n//complex example ov context\n\n// const themes = {\n//     light: {\n//       foreground: '#000000',\n//       background: '#eeeeee',\n//     },\n//     dark: {\n//       foreground: '#ffffff',\n//       background: '#222222',\n//     },\n//   };\n//   const ThemeContext = React.createContext(\n//     themes.dark // default value\n//   );\n\n//   class ThemedButton extends React.Component {\n//     render() {\n//       let props = this.props;\n//       let theme = this.context;\n//       return (\n//         <button\n//           {...props}\n//           style={{backgroundColor: theme.background}}\n//         />\n//       );\n//     }\n//   }\n//   ThemedButton.contextType = ThemeContext;\n\n//   // An intermediate component that uses the ThemedButton\n// function Toolbar(props) {\n//     return (\n//       <ThemedButton onClick={props.changeTheme}>\n//         Change Theme\n//       </ThemedButton>\n//     );\n//   }\n\n//   class App extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = {\n//         theme: themes.light,\n//       };\n\n//       this.toggleTheme = () => {\n//         this.setState(state => ({\n//           theme:\n//             state.theme === themes.dark\n//               ? themes.light\n//               : themes.dark,\n//         }));\n//       };\n//     }\n\n//     render() {\n//       // The ThemedButton button inside the ThemeProvider\n//       // uses the theme from state while the one outside uses\n//       // the default dark theme\n//       return (\n//         <Page>\n//           <ThemeContext.Provider value={this.state.theme}>\n//             <Toolbar changeTheme={this.toggleTheme} />\n//           </ThemeContext.Provider>\n//           <Section>\n//             <ThemedButton />\n//           </Section>\n//         </Page>\n//       );\n//     }\n//   }\n\n  //end complex example of context\n\n  //error boundaries example\n//   class ErrorBoundary extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { error: null, errorInfo: null };\n//     }\n\n//     componentDidCatch(error, errorInfo) {\n//       // Catch errors in any components below and re-render with error message\n//       this.setState({\n//         error: error,\n//         errorInfo: errorInfo\n//       })\n//       // You can also log error messages to an error reporting service here\n//     }\n\n//     render() {\n//       if (this.state.errorInfo) {\n//         // Error path\n//         return (\n//           <div>\n//             <h2>Something went wrong.</h2>\n//             <details style={{ whiteSpace: 'pre-wrap' }}>\n//               {this.state.error && this.state.error.toString()}\n//               <br />\n//               {this.state.errorInfo.componentStack}\n//             </details>\n//           </div>\n//         );\n//       }\n//       // Normally, just render children\n//       return this.props.children;\n//     }\n//   }\n\n//   class BuggyCounter extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { counter: 0 };\n//       this.handleClick = this.handleClick.bind(this);\n//     }\n\n//     handleClick() {\n//       this.setState(({counter}) => ({\n//         counter: counter + 1\n//       }));\n//     }\n\n//     render() {\n//       if (this.state.counter === 5) {\n//         // Simulate a JS error\n//         throw new Error('I crashed!');\n//       }\n//       return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n//     }\n//   }\n\n//   function App() {\n//     return (\n//       <div>\n//         <p>\n//           <b>\n//             This is an example of error boundaries in React 16.\n//             <br /><br />\n//             Click on the numbers to increase the counters.\n//             <br />\n//             The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n//           </b>\n//         </p>\n//         <hr />\n//         <ErrorBoundary>\n//           <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n//           <BuggyCounter />\n//           <BuggyCounter />\n//         </ErrorBoundary>\n//         <hr />\n//         <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n//         <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n//         <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n//       </div>\n//     );\n//   }\n  //end error boundaries example\n\n\n//   class ClickCounter extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {count: 0};\n//         this.incrementCount = this.incrementCount.bind(this)\n//     }\n//     incrementCount() {\n//         this.setState(prevState => {\n//             return {count: prevState.count + 1}\n//         })\n//     }\n//     render() {\n//         const count = this.state.count;\n//         return (\n//             <button onClick={this.incrementCount}>Clicked {count} times</button>\n//         )\n//     }\n//  }\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n// class OuterClickExample extends React.Component {\n//     constructor(props) {\n//       super(props);\n\n//       this.state = { isOpen: false };\n//       this.toggleContainer = React.createRef();\n\n//       this.onClickHandler = this.onClickHandler.bind(this);\n//       this.onClickOutsideHandler = this.onClickOutsideHandler.bind(this);\n//     }\n\n//     componentDidMount() {\n//       window.addEventListener('click', this.onClickOutsideHandler);\n//     }\n\n//     componentWillUnmount() {\n//       window.removeEventListener('click', this.onClickOutsideHandler);\n//     }\n\n//     onClickHandler() {\n//       this.setState(currentState => ({\n//         isOpen: !currentState.isOpen\n//       }));\n//     }\n\n//     onClickOutsideHandler(event) {\n//       if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n//         this.setState({ isOpen: false });\n//       }\n//     }\n\n//     render() {\n//       return (\n//         <div ref={this.toggleContainer}>\n//           <button onClick={this.onClickHandler}>Select an option</button>\n//           {this.state.isOpen && (\n//             <ul>\n//               <li>Option 1</li>\n//               <li>Option 2</li>\n//               <li>Option 3</li>\n//             </ul>\n//           )}\n//         </div>\n//       );\n//     }\n//   }\n\n// let obj = {dollar: 522.59, dram: 1, rubli: 7.04, euro: 638.56, china: 34, Korea: 17}\n// //main Component Change\n// function ChangeInput({handleInputChange, name, value, currentChange}) {\n//     return (\n//         <div>\n//         <label>\n//             {name}\n//         <input type=\"text\" name={name} value={(value * obj[currentChange] / obj[name]).toFixed(0)} onChange={(e) => handleInputChange(e)} />\n//         </label>\n//         </div>\n//     )\n// }\n// function Change() {\n//     const [value, setValue] = useState(0);\n//     const [currentChange, setCurrentChange] = useState('dram');\n//     //handlers\n//     function handleInputChange(e) {\n//         if(Object.is(NaN, +e.target.value)) {return}\n//         setValue(e.target.value);\n//         setCurrentChange(e.target.name);\n//     }\n//     const inputs = Object.keys(obj).map((name, index) => {\n//         return (\n//             <ChangeInput name={name} key={index} handleInputChange={handleInputChange} value={value} currentChange={currentChange}/>\n//         )\n//     })\n//     return (\n//         <div>\n//             {inputs}\n//         </div>\n//     )\n// }\n\n//example ov charts(grafik)\n //and also one thing need to import from react besides below\n\n// ('https://api.covid19api.com/summary', DATA);\n    //homework covid-19\n// function SearchForm({setInputValue, inputValue}) {\n//   function handleInputChange(e) {\n//     setInputValue(e.target.value);\n//   }\n//   return (\n//     <input onChange={handleInputChange} value={inputValue} id='search-input'/>\n//   )\n// }\n// function CreateChart(props) {\n//   const [data, setData] = useState(null);\n//   const [filteredData, setFilteredData] = useState(null)\n//   const [inputValue, setInputValue] = useState('');\n\n//   //request\n//   useEffect(() => {\n//     fetch('https://api.covid19api.com/summary')\n//     .then(response => response.json())\n//     .then(resolvedData => {\n//       setData(resolvedData);\n//     });\n//   },[]);\n\n//   //lifeCycles\n//   // useEffect(() => {\n//   //   console.log(data?.Countries);\n//   // }, [data]);\n//   useEffect(() => {\n//     console.log(filteredData)\n//   },[filteredData])\n\n//   //handlers\n//   function handleClick(e) {\n//     if(!inputValue) {\n//       return\n//     }\n//     let capitalizedInput = inputValue[0].toUpperCase() + inputValue.slice(1,inputValue.length);\n//     let result = data.Countries.filter(countryInfo => countryInfo.Country.includes(capitalizedInput));\n//     setFilteredData(result);\n//   }\n\n//   return(\n//     <div>\n//       <div className=\"heading\">\n//       <SearchForm inputValue={inputValue} setInputValue={setInputValue}/>\n//       </div>\n\n//       <div className='button'>\n//         <button onClick={() => handleClick()}>Search</button>\n//       </div>\n//       <div className=\"footer\">\n//         <h1>Matching results</h1>\n//       </div>\n//     </div>\n//   )\n\n// }\n\n// function MatchingResaults(countryList) {\n//   let result = countryList.map(countryInfo => {\n\n//   })\n// }\n //end of covid-19\n\n// function InputExample(props) {\n//   return (\n//     <input value={props.value} onChange={() => props.handleInputChange}/>\n//   )\n// }\n// function containerInput(InputElement) {\n//   function Container(props) {\n//     const [value, setValue] = useState('');\n//     function handleInputChange(e) {\n//       setValue(e.target.value)\n//     }\n//     return (\n//       <InputElement value handleInputChange/>\n//     )\n//   }\n// }\n\n//example of useContext\n//  const themes = {\n//   light: {\n//     foreground: \"#000000\",\n//     background: \"#eeeeee\"\n//   },\n//   dark: {\n//     foreground: \"#ffffff\",\n//     background: \"#222222\"\n//   }\n// };\n\n// const ThemeContext = React.createContext(themes.light);\n\n// export default function App() {\n//   return (\n//     <ThemeContext.Provider value={themes.light}>\n//       <Toolbar />\n//     </ThemeContext.Provider>\n//   );\n// }\n\n// function Toolbar(props) {\n//   return (\n//     <div>\n//       <ThemedButton />\n//     </div>\n//   );\n// }\n\n// function ThemedButton() {\n//   const theme = useContext(ThemeContext);\n//   return (\n//     <button style={{ background: theme.background, color: theme.foreground }}>\n//       I am styled by theme context!\n//     </button>\n//   );\n// }\n// end of example of useContext\n\n//example of useReducer\n// const initialState = {count: 0};\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return {count: state.count + 1};\n//     case 'decrement':\n//       return {count: state.count - 1};\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// export default function Counter() {\n//   const [state, dispatch] = useReducer(reducer, initialState);\n//   return (\n//     <>\n//       Count: {state.count}\n//       <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n//       <button onClick={() => dispatch({type: 'increment'})}>+</button>\n//     </>\n//   );\n// }\n//end of example of useReducer\n\n//second example of useReducer with init function\n// function init(initialCount) {\n//   return {count: initialCount};\n// }\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return {count: state.count + 1};\n//     case 'decrement':\n//       return {count: state.count - 1};\n//     case 'reset':\n//       return init(action.payload);\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// export default function Counter({initialCount}) {\n//   const [state, dispatch] = useReducer(reducer, 15, init);\n//   return (\n//     <>\n//       Count: {state.count}\n//       <button\n//         onClick={() => dispatch({type: 'reset', payload: 15})}>\n//         Reset\n//       </button>\n//       <button onClick={() => dispatch({type: 'decrement'})}>minus</button>\n//       <button onClick={() => dispatch({type: 'increment'})}>plus</button>\n//     </>\n//   );\n// }\n//end of example\n\n//example of memo and callback\n// export default function Hook() {\n//   const [localNumber, setLocalNumber] = useState(0);\n//   const [childNumber, setChildNumber] = useState(0);\n//   function incrementLocal() {\n//     setLocalNumber(state => state + 1);\n//   }\n//   function changeChildNumber(number) {\n//     setChildNumber(number);\n//   }\n//   const memoizedCallback = useCallback(number => changeChildNumber(number),[])\n//   return (\n//     <div>\n//       <Child number={childNumber} changeNumber={memoizedCallback}/>\n//       <br/>\n//       <button onClick={incrementLocal}>\n//         click to increment local\n//       </button>\n//       <h1>local: {localNumber}</h1>\n//     </div>\n//   )\n// }\n//end of example\n\n//useState with usereducer\n// const useStateReducer = (prevState, dispatch) => typeof dispatch === 'function' ? prevState : dispatch;\n\n// const useStateInitializer = initialArg => typeof initialArg === 'function' ? initialArg() : initialArg;\n// function useState(initialValue) {\n//   return React.useReducer(useStateReducer, initialValue, useStateInitializer);\n// }\n//  export default function Counter(props) {\n//   const [count, setCount] = useState(0);\n//   // const increment = () => setCount(count => count + 1);\n//   const increment = () => setCount((prevCount) => prevCount + 1);\n//   return (\n//     <div>\n//       <div>the current count is {count}</div>\n//       <button onClick={increment}>click me</button>\n//     </div>\n//   )\n// }\n//end of example\n\n//useState from useReducer\n// const useStateReducer = (prevState, newState) => {\n//   if(typeof newState === 'function') {\n//     return newState(prevState)\n//   } else {\n//     return newState;\n//   }\n// }\n// const useStateInitializer = initialValue => {\n//   return typeof initialValue === 'function' ? initialValue() : initialValue;\n// }\n//   function useState(initialValue) {\n//     return useReducer(useStateReducer, initialValue, useStateInitializer);\n//   }\n\n//  export default function App(props) {\n//    const [count, setCount] = useState(() => 10);\n//    function handlePlusClick() {\n//      setCount((prevCount) => prevCount + 1);\n//    }\n//    function handleMinusClick() {\n//      setCount(prevCount => prevCount - 1)\n//    }\n//    return (\n//      <>\n//      <h1>{count}</h1>\n//      <button onClick={handlePlusClick}>+</button>\n//      <br></br>\n//      <button onClick={handleMinusClick}>-</button>\n//      </>\n//    )\n//  }\n// //end of example\n\n\n//useReducer example\n// export default function App() {\n//   function reducer(state, action) {\n//     switch(action) {\n//       case 'increment': return state + 1;\n//       case 'decrement' : return state - 1;\n//       default :throw new Error('wtf is going on');\n//     }\n//   }\n//   function init() {\n\n//   }\n//   const [count, dispatch] = useReducer(reducer, 10);\n//   return (\n// <>\n//   <h1>{count}</h1>\n//   <button onClick={() => dispatch('decrement')}>minus</button>\n//   <button onClick={() => dispatch('increment')}>plus</button>\n// </>\n//   );\n// }\n//end of example\n\n\n//useReducer From useState start not finished yet\n// function useReducer(reducer, initalValue, init) {\n//   if(!init) {\n//     const [state, setState] = useState(init(initalValue));\n//   }else {\n//     const [state, setState] = useState(initailValue);\n//   }\n//   return ([state, reducer()])\n// }\n\n//end of example\n\n// function Some(props) {\n//   return (\n//     <button onClick={props.handleClick}></button>\n//   )\n// }\n// function hoc(WrappedComponent, selectData) {\n//   return (props) => {\n//     const [count, setCount] = useState(0);\n//     function handleClick() {\n//       setCount(count + 1);\n//       console.log('barev');\n//     }\n//   }\n//   return (<WrappedComponent handleClick={() => handleClick}/>)\n// }\n// export default hoc(Some)\n\n\n//useReducer from useState\n// function useReducer(reducer, initialValue, init) {\n//   const [state, setState] = useState(init ? init(initialValue) : initialValue);\n//   // if(!init) {\n//   //   const [state, setState] = useState(initialValue);\n//   // } else {\n//   //   const [state, setState] = useState(init(initialValue));\n//   // }\n//   function dispatch(value) {\n//     setState(reducer(state, value))\n//   }\n//   return [state, dispatch]\n// }\n// function reducer(state, value) {\n//   switch(value) {\n//     case 'Andranik': return 'Tsaturyan';\n//     case 'Hayk': return 'Poghosyan';\n//     case 'Arman': return 'Tsaturyan';\n//     case 'Hovsep': return 'Poghosyan';\n//   }\n// }\n// export default function App(props) {\n//   const [state, dispatch] = useReducer(reducer, 'Andranik');\n//   return (\n//     <div>\n//       <h1>{state}</h1>\n//       <button onClick={() => dispatch('Hayk')}>click</button>\n//     </div>\n//   )\n// }\n//end of example\n\n\n//following component tracks the mouse position in a web app\n// export default class MouseTracker extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n//         <h1>Move the mouse around!</h1>\n//         <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n//       </div>\n//     );\n//   }\n// }\n\n//end of example\n\n\n// The <Mouse> component encapsulates the behavior we need...\n// class Mouse extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n//         {/* ...but how do we render something other than a <p>? */}\n//         <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <>\n//         <h1>Move the mouse around!</h1>\n//         <Mouse />\n//         <h1>barev</h1>\n//       </>\n//     );\n//   }\n// }\n\n//end of example\n\n//cat is moving with mouse\n// class Cat extends React.Component {\n//   render() {\n//     const mouse = this.props.mouse;\n//     return (\n//       <img src=\"https://www.google.com/url?sa=i&url=https%3A%2F%2Funsplash.com%2Fphotos%2FS9OCBwRFV_k&psig=AOvVaw2b7imO6aneaAqeYfG0t1GY&ust=1611231431852000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCNC-wvy-qu4CFQAAAAAdAAAAABAD\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n//     );\n//   }\n// }\n\n// class MouseWithCat extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n//         {/*\n//           We could just swap out the <p> for a <Cat> here ... but then\n//           we would need to create a separate <MouseWithSomethingElse>\n//           component every time we need to use it, so <MouseWithCat>\n//           isn't really reusable yet.\n//         */}\n//         <Cat mouse={this.state} />\n//       </div>\n//     );\n//   }\n// }\n\n//  export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Move the mouse around!</h1>\n//         <MouseWithCat />\n//       </div>\n//     );\n//   }\n// }\n//end of example\n\n//start of example\n// class Cat extends React.Component {\n//   render() {\n//     const mouse = this.props.mouse;\n//     return (\n//       <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n//     );\n//   }\n// }\n\n// class Mouse extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleMouseMove = this.handleMouseMove.bind(this);\n//     this.state = { x: 0, y: 0 };\n//   }\n\n//   handleMouseMove(event) {\n//     this.setState({\n//       x: event.clientX,\n//       y: event.clientY\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n//         {/*\n//           Instead of providing a static representation of what <Mouse> renders,\n//           use the `render` prop to dynamically determine what to render.\n//         */}\n//         {this.props.render(this.state)}\n//       </div>\n//     );\n//   }\n// }\n\n// export default class MouseTracker extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         <h1>Move the mouse around!</h1>\n//         <Mouse render={mouse => (\n//           <Cat mouse={mouse} />\n//         )}/>\n//       </div>\n//     );\n//   }\n// }\n\n//end of example\n// function reducer(state, value) {\n//   if(value == 'andranik') {\n//     return 'artur'\n//   } else if(value === 'artur') {\n//     return 'andranik'\n//   } else {\n//     return 'Mish'\n//   }\n// }\n// //example of useReducer\n// export default function App(props) {\n//   const [state, setState] = useState('andranik');\n//   const [name, dispatch] = useReducer(reducer, 'armen');\n//   useEffect(() => {\n//     dispatch('andranik');\n//   }, []);\n//   return (\n//     <h1>{name}</h1>\n//   )\n// }\n//end of example\n// class app extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {number: 15}\n//   }\n//   componentDidMount() {\n//     console.log('something');\n//   }\n//   componentWillUnmount() {\n//     console.log('heracav');\n//   }\n//   componentDidUpdate() {\n//     console.log('update');\n//   }\n// }\n\n// function App(props) {\n//   const [time, setTime] = useState(new Date().toLocaleTimeString());\n\n//   useEffect(() => {\n//     setInterval(() => {\n//       setTime(new Date().toLocaleTimeString());\n//     }, 1000)\n//   }, [])\n\n//   return (\n//     <h1>{time}</h1>\n//   )\n// }\n// export default App\n\n// export default function App(props) {\n//   const [count, setCount] = useState(0);\n//   let name = \"ÐºÐ°Ðº Ñ‚Ð²Ð¾Ð¸ Ð´ÐµÐ»Ð°\";\n//   return (\n//     <div>\n//       <h1>{name.slice(0,count)}</h1>\n//       <button onClick={() => {setCount(count + 1)}}>click me multiple times</button>\n//     </div>\n//   )\n// }\n\n//uncontrolled components example\n  // export default function Uncotrolled() {\n  //   let element = useRef(null);\n  //   return (\n  //     <div>\n  //       <input ref={element}/>\n  //       <button onClick={() => console.log(element.current.value)}>button</button>\n  //     </div>\n\n  //   )\n  // }\n//end of example\n// export default function FirstHook() {\n//   const [count, setCount] = useState(0);\n//   return (\n//     <div>\n//       <h1>{count}</h1>\n//       <button onClick={() => setCount(count + 1)}>click me</button>\n//     </div>\n\n//   )\n// }\nexport default function App() {\n  const [name, setName] = useState(0);\n  const [date, setDate] = useState(new Date().toLocaleTimeString());\n  useEffect(() => {\n    let timer = setInterval(() => {\n      setDate(new Date().getTime());\n    },1000);\n\n    return () => {\n      clearInterval(timer);\n    }\n  },[])\n\n  // useEffect(() => {}, [])\n\n  return (\n    <div>\n      <button onClick={() => setName(name + 1)}>click</button>\n      <h1>{date}</h1>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}