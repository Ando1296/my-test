{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './hook.css'; //declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n//You can use the State Hook more than once in a single component: end\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n//useEffect\n// function Example() {\n//   const [count, setCount] = useState(0);\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n//useEffect Hook\n//example using classes\n// class FriendStatus extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       this.state = { isOnline: null };\n//       this.handleStatusChange = this.handleStatusChange.bind(this);\n//     }\n//     componentDidMount() {\n//       ChatAPI.subscribeToFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     componentWillUnmount() {\n//       ChatAPI.unsubscribeFromFriendStatus(\n//         this.props.friend.id,\n//         this.handleStatusChange\n//       );\n//     }\n//     handleStatusChange(status) {\n//       this.setState({\n//         isOnline: status.isOnline\n//       });\n//     }\n//     render() {\n//       if (this.state.isOnline === null) {\n//         return 'Loading...';\n//       }\n//       return this.state.isOnline ? 'Online' : 'Offline';\n//     }\n//   }\n//example using classes **\n//example using functions\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n//     useEffect(() => {\n//       function handleStatusChange(status) {\n//         setIsOnline(status.isOnline);\n//       }\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       // Specify how to clean up after this effect:\n//       return function cleanup() {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//example using functions**\n//hook1\n// useEffect(() => {\n//     document.title = `You clicked ${count} times`;\n//   }, [count]); // Only re-run the effect if count changes\n//hook1 ****\n// !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n//useEffect Hook****\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\n\nfunction App1(props) {\n  _s();\n\n  const [click, setClick] = useState(0);\n  const [time, setTime] = useState(5); // const [result, setResult] = useState([]);\n\n  function tryAgain() {\n    if (time === 0) {\n      // this.setState((state, props) => ({\n      //     time: (state.time = 5),\n      //     click: (state.click = 0),\n      // }))\n      setTime(5);\n      setClick(0);\n    }\n  }\n\n  function clicking() {\n    if (time > 0) {\n      // this.setState((state, props) => ({ click: ++state.click }))\n      setClick(click + 1);\n    }\n  }\n\n  let timeId = 0;\n  useEffect(() => {\n    timeId = setInterval(() => {\n      if (time > 0) {\n        setTime(time - 1);\n      }\n    }, 1000);\n    return () => clearInterval(timeId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"congratulations_block\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"congratulations\",\n          children: click >= 60 ? 'Congratulations' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Goal - 60 click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Time - \", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Clicks - \", click]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_style\",\n        onClick: clicking,\n        children: \"Click me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button_style\",\n        onClick: tryAgain,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App1, \"FSYT/ICvwCBH8ePBJtiMtVmM1U0=\");\n\n_c = App1;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // this.resultClick = []\n\n    this.state = {\n      click: 0,\n      time: 5,\n      result: []\n    };\n    this.clicking = this.clicking.bind(this);\n    this.tryAgain = this.tryAgain.bind(this);\n  }\n\n  componentDidMount() {\n    this.timeId = setInterval(() => {\n      this.setState((state, props) => {\n        if (this.state.time > 0) {\n          return {\n            time: state.time - 1\n          };\n        }\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timeId);\n  }\n\n  clicking() {\n    if (this.state.time > 0) {\n      this.setState((state, props) => ({\n        click: ++state.click\n      }));\n    }\n  }\n\n  tryAgain() {\n    if (this.state.time === 0) {\n      this.setState((state, props) => ({\n        time: state.time = 5,\n        click: state.click = 0\n      }));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"congratulations_block\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"congratulations\",\n            children: this.state.click >= 60 ? 'Congratulations' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Goal - 60 click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" Time - \", this.state.time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Clicks - \", this.state.click]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_style\",\n          onClick: this.clicking,\n          children: \"Click me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button_style\",\n          onClick: this.tryAgain,\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default function Hook() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(App1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Hook;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App1\");\n$RefreshReg$(_c2, \"Hook\");","map":{"version":3,"sources":["/Users/andtsatur/Desktop/Programming/React/my-app/src/hooks/hook.js"],"names":["React","useEffect","useState","App1","props","click","setClick","time","setTime","tryAgain","clicking","timeId","setInterval","clearInterval","App","Component","constructor","state","result","bind","componentDidMount","setState","componentWillUnmount","render","Hook"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEY;AAEZ;AAEJ;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAD,CAAhC,CAFiB,CAGjB;;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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './hook.css'\n\n//declaring new state variable\n// function Example(props) {\n//     //here\n//     const [count, setCount] = useState(0);\n//     return (\n//         <div>\n//             <p>click to button to set++ counter</p>\n//             <h1>{count}</h1>\n//             <button onClick={() => setCount(count + 1)}>click me</button>\n//         </div>\n//     )\n// }\n//declaring new state variable end\n\n//You can use the State Hook more than once in a single component:\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n//     // ...\n//   }\n  //You can use the State Hook more than once in a single component: end\n\n\n//   component sets the document title after React updates the DOM:\n// function Example() {\n//     const [count, setCount] = useState(0);\n//     // Similar to componentDidMount and componentDidUpdate\n//     useEffect(() => {\n//         //// Update the document title using the browser API\n//         document.title = `Yout clicked ${count} times`\n//     });\n\n//     return (\n//         <div>\n//           <p>You clicked {count} times</p>\n//           <button onClick={() => setCount(count + 1)}>\n//             Click me\n//           </button>\n//         </div>\n//       )\n// }\n// omponent sets the document title after React updates the DOM: **\n\n//unsubscribing\n// function FriendStatus(props) {\n//     const [isOnline, setIsOnline] = useState(null);\n\n//     function handleStatusChange(status) {\n//       setIsOnline(status.isOnline);\n//       console.log(status);\n//     }\n\n//     useEffect(() => {\n//       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n//       return () => {\n//         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n//       };\n//     });\n\n//     if (isOnline === null) {\n//       return 'Loading...';\n//     }\n//     return isOnline ? 'Online' : 'Offline';\n//   }\n//unsubscribing end\n\n//example many state variables\n// function ExampleWithManyStates() {\n//     // Declare multiple state variables!\n//     const [age, setAge] = useState(42);\n//     const [fruit, setFruit] = useState('banana');\n//     const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n// }\n//example many state variables ***\n\n//useEffect\n\n// function Example() {\n//   const [count, setCount] = useState(0);\n\n//   // Similar to componentDidMount and componentDidUpdate:\n//   useEffect(() => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${count} times`;\n//   });\n\n//   return (\n//     <div>\n//       <p>You clicked {count} times</p>\n//       <button onClick={() => setCount(count + 1)}>\n//         Click me\n//       </button>\n//     </div>\n//   );\n// }\n//useEffect****\n//If youâ€™re familiar with React class lifecycle methods, you can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined.\n\n//useEffect Hook\n    //example using classes\n    // class FriendStatus extends React.Component {\n    //     constructor(props) {\n    //       super(props);\n    //       this.state = { isOnline: null };\n    //       this.handleStatusChange = this.handleStatusChange.bind(this);\n    //     }\n\n    //     componentDidMount() {\n    //       ChatAPI.subscribeToFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     componentWillUnmount() {\n    //       ChatAPI.unsubscribeFromFriendStatus(\n    //         this.props.friend.id,\n    //         this.handleStatusChange\n    //       );\n    //     }\n    //     handleStatusChange(status) {\n    //       this.setState({\n    //         isOnline: status.isOnline\n    //       });\n    //     }\n\n    //     render() {\n    //       if (this.state.isOnline === null) {\n    //         return 'Loading...';\n    //       }\n    //       return this.state.isOnline ? 'Online' : 'Offline';\n    //     }\n    //   }\n    //example using classes **\n\n    //example using functions\n    // function FriendStatus(props) {\n    //     const [isOnline, setIsOnline] = useState(null);\n\n    //     useEffect(() => {\n    //       function handleStatusChange(status) {\n    //         setIsOnline(status.isOnline);\n    //       }\n    //       ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    //       // Specify how to clean up after this effect:\n    //       return function cleanup() {\n    //         ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    //       };\n    //     });\n\n    //     if (isOnline === null) {\n    //       return 'Loading...';\n    //     }\n    //     return isOnline ? 'Online' : 'Offline';\n    //   }\n    //example using functions**\n    //hook1\n    // useEffect(() => {\n    //     document.title = `You clicked ${count} times`;\n    //   }, [count]); // Only re-run the effect if count changes\n    //hook1 ****\n\n                // !! If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.\n\n    //useEffect Hook****\n\n//practice\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     const [anotherTime, setAnotherTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n\n//         console.log('barev');\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString());\n//             setAnotherTime(new Date().toLocaleTimeString());\n//         },1000);\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     },[]); //function scope works once because of depandency\n//     return (\n//         <div>\n//             {time}\n//         </div>\n//     )\n// }\n// function Example(props) {\n//     const [time, setTime] = useState(new Date().toLocaleTimeString());\n//     let [anotherTime, anotherSetTime] = useState(new Date().toLocaleTimeString());\n//     useEffect(() => {\n//         let timerId = setInterval(() => {\n//             setTime(new Date().toLocaleTimeString())\n//             //Attention\n//             anotherSetTime(new Date().toLocaleTimeString())\n//             //end of attention\n\n//         },1000)\n//         return () => {\n//             clearInterval(timerId);\n//         }\n//     }, [time]);\n\n//     useEffect(() => {\n//         //Attention\n//         console.log('something');\n//         //here dependency on another time\n//         //this function is working after anotherTime change no metter you are using it\n//         //in your return or not\n//     }, [anotherTime]);\n//     return (\n//         <h1>{time}</h1>\n//     )\n// }\nfunction App1(props) {\n    const [click, setClick] = useState(0);\n    const [time, setTime] = useState(5);\n    // const [result, setResult] = useState([]);\n\n    function tryAgain() {\n        if (time === 0) {\n            // this.setState((state, props) => ({\n            //     time: (state.time = 5),\n            //     click: (state.click = 0),\n            // }))\n            setTime(5);\n            setClick(0);\n        }\n    }\n    function clicking() {\n        if (time > 0) {\n            // this.setState((state, props) => ({ click: ++state.click }))\n            setClick(click + 1);\n        }\n    }\n    let timeId = 0;\n\n    useEffect(() => {\n        timeId = setInterval(() => {\n            if(time > 0) {\n                setTime(time - 1);\n            }\n\n        }, 1000);\n        return () => clearInterval(timeId);\n    },[]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"congratulations_block\">\n                    <p className=\"congratulations\">\n                        {click >= 60 ? 'Congratulations' : ''}\n                    </p>\n                </div>\n\n                <p>Goal - 60 click</p>\n                <h1> Time - {time}</h1>\n                <h2>Clicks - {click}</h2>\n                <button className=\"button_style\" onClick={clicking}>\n                    Click me\n                </button>\n                <button className=\"button_style\" onClick={tryAgain}>\n                    Try Again\n                </button>\n            </header>\n        </div>\n    )\n\n}\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        // this.resultClick = []\n        this.state = { click: 0, time: 5, result:[] }\n        this.clicking = this.clicking.bind(this)\n        this.tryAgain = this.tryAgain.bind(this)\n    }\n    componentDidMount() {\n        this.timeId = setInterval(() => {\n            this.setState((state, props) => {\n                if (this.state.time > 0) {\n                    return { time: state.time - 1 }\n                }\n            })\n        }, 1000)\n    }\n    componentWillUnmount() {\n\n        clearInterval(this.timeId)\n    }\n    clicking() {\n        if (this.state.time > 0) {\n            this.setState((state, props) => ({ click: ++state.click }))\n        }\n    }\n    tryAgain() {\n        if (this.state.time === 0) {\n            this.setState((state, props) => ({\n                time: (state.time = 5),\n                click: (state.click = 0),\n            }))\n        }\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"congratulations_block\">\n                        <p className=\"congratulations\">\n                            {this.state.click >= 60 ? 'Congratulations' : ''}\n                        </p>\n                    </div>\n\n                    <p>Goal - 60 click</p>\n                    <h1> Time - {this.state.time}</h1>\n                    <h2>Clicks - {this.state.click}</h2>\n                    <button className=\"button_style\" onClick={this.clicking}>\n                        Click me\n                    </button>\n                    <button className=\"button_style\" onClick={this.tryAgain}>\n                        Try Again\n                    </button>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default function Hook() {\n    return(\n        <div>\n            <App1/>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}